package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x51\x8b\xdb\x46\x10\x7e\xf7\xaf\x58\xb6\x7d\x2c\x77\xd7\x50\xfa\x70\x6f\x57\xc7\xe4\x8e\x10\xbb\x58\x67\x68\x28\x87\xd8\x93\xc6\xbe\x4d\xa5\x5d\x65\x77\x75\xad\x29\x86\xa6\xb4\x25\x85\x2b\x1c\xa4\xc1\x4d\x7a\x14\x5a\x4a\x29\x2d\xe4\xde\x4a\x70\x0a\xfd\x33\x27\xa7\x79\xea\x5f\x28\x2b\xd9\xb2\xb4\x92\x1d\x9d\x1c\xfb\xc9\xda\xdd\x19\x7d\x33\xf3\x7d\x33\xab\xcf\x1b\x08\x61\xf9\x29\x19\x0c\x40\xe0\x5d\x84\x6f\x6c\xed\xe0\x77\xf4\x1a\x65\x7d\x8e\x77\x91\xde\x47\x08\x2b\xaa\x3c\xd0\xfb\x81\xe0\x8a\x6f\xfb\xd4\x11\xdc\xf6\x89\xe7\xd9\x5c\xb8\x20\xec\x64\x39\xf9\x7f\x1c\x4a\xca\x40\x4a\xe3\x71\x2b\x3e\x13\x3b\x47\x08\x9f\x82\x90\x94\x33\xed\x72\xf6\x17\x31\xae\x90\x04\x85\x1b\x08\x8d\x62\x08\x0e\x67\x32\xf4\x41\xe2\x5d\xf4\x71\x62\x45\x82\xc0\xa3\x0e\x51\x94\xb3\xed\x7b\x92\x33\x7d\xf6\x28\x3e\x1b\x08\xee\x86\x4e\xc5\xb3\x44\x9d\xc8\x45\x6c\xdb\xa7\xef\x26\x50\xb7\x1d\x01\x44\x41\xba\xa3\x8f\x72\xa9\x32\xcf\x3a\x57\xa1\xef\x13\x31\xd4\xc0\xa3\x87\x3f\x46\x2f\x26\xff\x3e\xfb\x25\xfa\xee\xf1\x2c\xae\xf8\x08\x0f\x40\xc4\xef\x3d\x70\xf5\xb1\x66\xec\xb5\xa3\xdf\x90\x3d\x25\x40\x06\x9c\x49\x90\x39\xff\x08\xe1\x1b\x3b\x3b\xc6\x12\x42\xd8\x05\xe9\x08\x1a\xa8\x59\xce\xf6\x90\x0c\x1d\x07\xa4\xec\x87\x1e\x9a\x7b\xda\xca\xb8\x4f\xb0\x3a\x27\xe0\x93\x82\x33\x84\xf0\xdb\x02\xfa\xda\xcf\x5b\xdb\x2e\xf4\x29\xa3\xda\xaf\x59\xb0\x0c\xee\xee\xec\x0d\x38\xe7\x67\xd4\x28\xfb\x3f\xca\xc4\x18\x10\x41\x7c\x50\x20\x16\x75\x49\x7e\x46\x74\x8c\xf8\x31\xbb\x8e\xb9\x3b\x34\x83\xa0\x6c\xd9\x8e\x80\xfb\x21\x15\xa0\x93\xac\x44\x08\x9b\x0b\xfe\x7e\x08\x52\x55\x89\xfd\x28\x13\xbb\x22\x03\x33\x6a\x1c\xfb\xfb\x60\xf6\x0a\x0b\xc4\x29\x75\x32\x39\x3d\x6a\x64\xfd\x8d\x52\x1d\x64\x50\x2e\x58\x6b\xc0\xe5\x94\x1d\x0e\x83\x1c\x77\x55\xf2\x8c\xa5\x12\x94\x0d\xd2\xe4\x61\x60\xa1\x9f\x03\x86\x9b\xed\xbb\x59\x66\xf6\xac\x9b\x73\x50\x69\x40\x1a\x04\x09\x3d\x15\x13\xba\x7d\x37\xd9\x9f\x95\xba\x80\xc5\xf7\x39\x4b\x29\x53\x82\x88\x1f\xdf\x03\x47\x2d\x10\x05\x42\x4b\x46\x51\x43\x0b\xd8\xe1\x2e\x98\xea\xa8\x52\xbc\x2e\xa8\xa6\x36\x2d\xe5\xa4\x2f\x07\xa6\x4f\x23\x53\x0d\xb3\xb0\xa3\x55\xd1\x16\x89\xb2\x46\xc4\x21\x75\x5f\x03\x2e\xcb\x72\xdc\xe7\xc2\x27\x71\x4d\x28\x53\xef\xbf\x57\x1e\xb0\xa2\x7e\x21\x8b\x4b\x23\xce\xd8\xe5\x5b\xce\xb5\xcd\x03\x32\x04\x61\x3b\x1e\x05\xa6\x6c\x1a\xd4\x43\xa0\x05\x62\xbf\x36\x27\x4b\x8c\x15\xa1\x5e\x1d\xfa\xc4\xc5\xbc\x99\x98\x17\xb9\x90\xd6\x30\x9d\x89\x57\xcf\xbf\xb8\x7a\xfe\x47\x34\x19\xbf\x7a\x34\x79\xf9\xf4\xab\xe8\xf1\x37\xd1\xa3\x07\x2f\x9f\x8d\x93\xf5\x64\x3e\xfc\xf7\xf7\x59\xf4\xdb\x97\xd3\x9f\x2e\xa2\xf3\xb3\xe9\xf8\xaf\xe8\xec\xeb\xe8\xfc\xcf\xe8\xd7\xa7\xa9\x61\xf4\xf0\xc9\xf4\xe2\xdb\x64\x65\x36\x52\xaa\xb2\xee\x4d\x08\x4d\x4b\xb6\x4e\xae\x0c\xb1\x97\x56\x22\xb1\xf0\xa8\x31\x4a\x33\x38\x89\x10\x24\xdf\xde\x31\x55\xe0\x9b\xa3\xf1\x3a\xf5\x6b\x31\x25\x86\xb8\x7c\x42\x55\x90\x75\x96\x03\x6b\x24\x56\x9e\xf0\xc0\x2e\x67\xe2\x06\x63\xb7\x4e\x78\x60\xf2\xb7\x56\x02\x92\x24\xae\x11\x7f\xe2\xb3\xac\x8f\x57\x91\xb0\xee\x5c\x36\x7c\x16\x50\x51\xdd\xbc\x6a\x68\xb7\x38\x77\xe5\x5a\xa5\xfd\x24\xac\x1d\x58\x20\xf4\xe0\xaf\x61\x48\x7c\x1e\xb2\xa5\x32\xaa\x3d\x22\x66\xf7\xaf\x37\x9b\x61\xcb\x01\x06\x07\xd9\xcf\x88\x3a\x59\x56\x5c\x80\x4d\xf3\x5e\x50\x55\x35\x58\xda\x3a\x86\x50\xa5\x8f\x4f\xbf\xbf\xbc\x7a\xf1\x43\x74\x31\x99\x3e\xb9\xbc\xfa\xe7\xe7\xe9\x83\xcb\x55\x2d\xd8\x54\xda\xba\x5d\x62\x03\x93\xdf\xe1\x94\xd9\x2a\x7f\x2d\xac\x9c\xbb\xf4\x4a\x59\xea\x7a\x60\xc8\x07\x6d\xb8\xa5\x25\x72\x2d\xef\x66\x19\x58\x52\x73\xae\x36\x5d\x0c\xda\x56\xe1\x4c\x74\x7e\x96\x8c\xf9\x57\xe3\xdf\xa3\xc9\x38\x1d\xff\xab\x98\x33\xbf\x9e\xd6\xba\xab\x5b\xbd\x66\xb3\x65\x59\xd9\xfb\x7a\xab\xdb\xed\x74\xf3\x17\xf8\x56\xd7\x6e\x77\x0e\xed\xd6\x47\x07\xd6\x61\x61\xa7\xb0\x7a\xa7\xd5\x6d\xee\xef\xb5\x0f\xcb\x6d\xd2\xdd\xc2\x8e\xb5\xdf\xf9\xb0\xdc\x26\xde\x29\xae\xde\xee\x2d\x39\x7e\xbb\x57\xbe\xb8\x77\xa7\xd3\x9b\xe3\x6a\x77\x7a\xb7\xf6\x57\x7e\x98\xcc\x73\xb3\x22\xf7\x8b\x8e\xb0\x86\x5e\x37\x20\xd5\x6b\x75\xe0\xec\x40\x10\x40\x6a\x8f\x21\xe2\xba\x02\xe4\x52\x19\x2f\xed\xfc\x45\x19\x24\xec\xcf\x35\x4d\xfd\xf9\xda\x18\x35\xfe\x0f\x00\x00\xff\xff\x2f\xea\x2d\xb8\x61\x12\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}

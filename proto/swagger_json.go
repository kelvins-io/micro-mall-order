package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6e\xdb\xc8\x15\xbe\xf7\x53\x10\x6c\x2f\x17\x71\x9a\x16\xbd\xc8\x9d\x56\x66\x12\x21\xb6\x24\x90\x72\x90\xa0\x08\x88\x31\x39\x92\x67\x2d\x72\x98\x99\xa1\x6b\xa1\x08\xe0\x74\xbb\x45\xba\x4d\x1b\x03\x9b\x8d\xb3\xd9\xa0\x8b\x6d\xb7\x41\xd0\xa2\xeb\x5e\x14\x9b\xc0\x5b\xa0\x2f\x63\xca\xc9\x55\x5f\xa1\xe0\x0c\x25\xf1\x57\xe2\x8f\x15\x4b\x5d\x13\x08\x60\xcd\x70\x66\xce\x39\x73\xbe\xf3\x4b\xe4\x57\x2b\x92\x24\xd3\x5f\x82\x5e\x0f\x12\xf9\xaa\x24\x5f\xb9\x74\x59\xfe\xc0\x1f\x43\x76\x17\xcb\x57\x25\x7f\x5e\x92\x64\x86\x58\x1f\xfa\xf3\x0e\xc1\x0c\xaf\x5a\xc8\x20\x58\xb7\x40\xbf\xaf\x63\x62\x42\xa2\x8b\x61\xf1\xf7\x96\x4b\x91\x0d\x29\x8d\xfd\xbc\xc4\xdf\xe1\x9b\x4b\x92\xbc\x0b\x09\x45\xd8\xf6\xb7\x0c\xfe\x94\x6c\xcc\x24\x0a\x99\xbc\x22\x49\xf7\x39\x09\x06\xb6\xa9\x6b\x41\x2a\x5f\x95\x7e\x21\x56\x01\xc7\xe9\x23\x03\x30\x84\xed\xd5\x8f\x28\xb6\xfd\x77\xef\xf2\x77\x1d\x82\x4d\xd7\xc8\xf9\x2e\x60\xdb\x74\xc2\xdb\xea\xee\x4f\x04\xa9\xab\xc6\x36\x34\x76\xc6\x13\xfe\x9b\x98\xb2\xd0\x6f\x5f\x54\xae\x65\x01\x32\xf0\xe9\x7e\xfb\xed\x9f\xbd\x3f\x7c\x7e\xfa\xe9\x77\xc3\xfd\x07\xc3\xbf\xec\x0f\xbf\xfa\x6b\xc0\x1c\x7f\x11\x3b\x90\xf0\xc3\x1b\xa6\xff\x72\xcb\x3f\xe0\xc3\x40\x14\x1a\x24\xbb\xc8\x80\x7a\xdd\x3f\x8f\xcf\x68\x0c\x30\x18\x5e\x4e\x20\x75\xb0\x4d\x21\x8d\x1c\x2f\x49\xf2\x95\xcb\x97\x63\x43\x92\x24\x9b\x90\x1a\x04\x39\x2c\x90\x68\x4d\xa2\xae\x61\x40\x4a\xbb\x6e\x5f\x1a\xed\x74\x29\xb4\xbd\x60\xc5\xd8\x86\x16\x48\x6c\x26\x49\xf2\x8f\x09\xec\xfa\xfb\xfc\x68\xd5\x84\x5d\x64\x23\x7f\xdf\xf8\x75\xc6\x68\x57\x83\x53\xe4\xc8\x5e\xf7\x43\xbf\xee\x87\x8f\x97\x4d\xd8\x05\x6e\x9f\xcd\x66\xc5\x96\x5c\x1b\xee\x39\xd0\x60\xd0\x94\x20\x21\x98\x8c\x39\xaa\xca\x10\x71\x6d\x86\x2c\xa8\xf8\x9b\x4e\xa1\x7b\x25\x85\x03\xd9\x01\x04\x58\x90\x41\x32\xd1\x38\xf1\xc4\xd8\xb1\x81\xc5\x71\xb3\x85\xcd\x41\x9c\x5e\x64\x67\xcd\x10\x78\xcf\x45\x04\xfa\x9a\xc3\x88\x0b\xe7\x7b\x71\xf7\x5c\x48\x59\x1e\xfe\xef\x86\xf8\x67\xa0\x17\xe7\x3c\x55\xc7\x27\xfb\xde\x5d\x09\xef\x17\xc8\x32\x0c\x3e\x6c\xc2\x30\xf6\x7a\x30\x1b\x7a\xa7\x4f\xbe\x1a\x3e\x3c\xf0\x9e\x1c\x9d\xbc\xd9\x17\x30\x3c\x39\xfe\xbd\xf7\xe9\xd7\xde\xe3\xd7\x45\x31\x78\x1d\xda\x7c\xbc\xb3\x57\xf7\x09\x58\x26\x08\x46\x49\xbf\x40\x60\xf0\x64\x20\xd0\x45\x66\x3a\x00\xef\xb9\x90\x4c\x43\x60\x17\xf4\x69\x1c\x82\x6c\xe0\xf0\x4d\x29\x23\xc8\xee\xc5\x17\x77\x31\xb1\x80\x2f\x59\x19\xd9\xec\xe7\x3f\x93\xcf\x09\x4d\xab\x70\x0f\x45\xfc\xd7\x54\x4c\x09\x17\xe6\x7d\xf3\xf4\xdd\xc7\xaf\x04\xa6\xbc\xc7\xaf\x87\xcf\x8e\xbc\x83\x97\xde\x3f\x9e\x79\x2f\x5e\x95\xf7\x6e\x0a\xa7\x63\x99\xa0\x15\xa3\xfd\x02\x5b\xc1\xb3\xd8\xd8\xfa\x60\x36\xa5\xe2\x9a\xd9\x9e\x6e\x44\xad\xfd\xd9\xd2\x7c\x1e\x80\x27\xd0\x0f\x21\xf3\x06\xaf\xde\xc3\x2f\xbd\xef\x8f\x05\xce\x0b\x03\x9b\x1f\xc5\xa7\x96\x0b\xd4\x13\xba\x2f\x00\x1d\x3c\x8b\x1f\xae\x86\x2f\x6d\x41\x42\x55\x13\x32\x80\xfa\x79\x1d\xeb\xdb\x3f\xbe\xf6\x1e\x3f\x15\x50\x7b\x7b\xf4\x72\xf8\xf1\x27\xc5\x63\x54\xc6\xc7\xd7\xc4\xb9\xcb\x84\xb9\x28\xe9\x17\xb0\x0b\x9e\x0c\xd8\xfd\x1f\xfa\x25\x1b\x33\xff\xfd\x62\x45\x95\xe1\x93\xa3\x93\xef\x9f\xbd\xdb\x7f\x7e\x5a\xbc\xa8\x22\x52\x22\x02\x4c\xd8\x14\x47\x2f\x13\x5c\xe2\xc4\x5f\x00\x26\x78\x16\xde\x4f\x25\x6f\x6e\x41\x9c\x15\xdd\x71\xcb\x78\x2a\xef\xf3\xdf\x7a\x9f\x3d\x28\xeb\xa9\xb4\x1d\x77\xa9\x70\x17\xa2\xfb\x02\x72\xc1\xf3\xc3\xf1\x51\x94\x15\x49\x9d\x86\x5f\xfe\x6b\xf8\xf4\x9f\xe1\xea\x7f\x51\x94\x6c\x3a\xe6\x28\xa6\x5d\xbe\xc2\x7f\x9c\xf8\x0b\xbc\x04\xcf\xc2\xbb\xa8\xe4\xcd\x9d\x8f\x8b\x1a\x37\xf8\x42\xa4\x4e\xda\x71\xf9\x0a\x71\x21\xb0\x8e\xec\x07\xde\xfa\x08\x1a\x93\x32\xa3\xec\x10\x1f\x8b\x0c\xc5\xa0\x24\x1b\xd8\xb2\xb8\x8a\x45\xe0\x95\x2b\x17\xe5\x2b\x93\x0a\x1f\x56\x0f\x44\xf5\x78\xd9\x35\x42\xe5\x16\xc6\x7d\x08\xec\xc8\xbd\x87\x8a\x5a\xa3\xe9\x95\xf8\x1d\x44\x6d\x57\xae\x96\x4e\x05\x19\x89\xfd\x7d\x3b\x9f\xb0\x43\xa3\xad\x00\x21\x20\xaa\xbe\x32\x62\xd0\x8a\xbf\x9f\xd3\xc0\x97\x62\x73\xd1\x75\xa1\x3f\x45\x0f\xf2\x8b\x2f\x77\xf4\x29\x7c\x49\x79\xf1\x62\x64\x77\x04\x75\x09\x79\xc6\x6a\xb1\x32\xb4\x5d\x2b\x62\x03\xe4\x7a\xf3\x4e\xd8\x8d\x6d\x6a\x6b\x23\x4a\xc6\xb6\x23\x64\xfa\xf9\xeb\x53\x69\x89\x48\xb7\xd2\x0d\x47\xda\x8a\xb9\x25\xaa\x42\xc6\x1b\x82\xa9\x17\x6b\xd1\x5e\xd6\xbd\xc6\x95\x3c\x97\xe4\x93\x35\xae\x0a\x1c\xbb\xc8\x9c\x41\x5c\x86\xed\x89\x15\xd4\xc3\x0c\xfb\xde\x32\x37\xc7\xa1\x75\x51\x9f\x5e\x78\xb9\x03\x06\xbe\x19\xea\x23\x68\x33\x1d\x39\xe5\x28\xe0\x21\xd7\x4c\x99\xa4\x2e\x8e\x76\x0b\x4a\x9d\x1e\xab\x14\x4a\x85\x10\x1d\x14\xfc\x32\xb6\xee\xa3\x5d\x48\x06\x7a\xe4\x4b\x9d\xe2\x27\x88\x5d\x1a\xfe\x26\x49\xa5\x1d\x2b\xdb\xf8\x03\xa0\x93\x37\xfb\x27\x6f\xfe\xe6\x1d\x1f\xbe\xfb\xec\xf8\xf4\xf9\x6f\x44\x9a\x78\xfa\xed\xa1\x18\x17\x51\xf1\x7f\xff\xfd\xc8\x7b\xf9\xeb\xe1\x9f\x5e\x78\x07\x8f\x86\x87\xdf\x79\x8f\x3e\xf1\x0e\xfe\xee\x7d\xf3\x7c\xbc\xd0\x7b\xf8\xc5\xf0\xc5\xef\xc4\x48\xd0\x83\xc8\x0b\x8f\x45\xb7\xf9\x45\x95\x25\x87\x79\xc8\xe8\xf3\x2f\xac\x08\xca\xa1\x26\x97\x20\x52\x8b\xc9\x0b\x2b\x08\x60\x18\xd8\xb5\x33\x43\x80\x69\x86\xc3\xc0\xc8\xd6\x59\xd4\x1b\x17\xa0\x2d\xf0\xe4\xe7\x1c\x95\x68\xdb\xd8\x49\xb5\x63\x45\x43\x93\xb4\xf2\xcc\xc2\xde\xba\x58\xf1\xbe\x63\xbf\x1d\xb7\xbc\x78\x5b\xa3\x9a\xc5\x06\x64\xa0\x52\xda\xe0\xe8\xf3\x88\x3e\xb0\x53\xd2\xf9\x63\x47\x77\xfa\x80\xf9\x87\x94\x5c\x2e\xc2\x87\xb3\x34\x62\x49\xb7\x5b\x25\xd6\xa3\x90\xe8\x93\x48\x20\x53\xf4\xc8\x66\xb0\x17\x69\xd7\xc7\x65\xff\xd3\x2b\xa5\xd8\x88\x37\x42\x8b\x32\x40\xb7\xb9\x90\xd3\xa2\xa4\x79\xa2\x65\x1b\x3b\x55\x6d\x12\xdf\xe8\x3a\xc6\x26\xad\xc4\xff\x8e\x5b\x3a\xb8\x74\x48\x11\xd5\x0c\xfb\x25\x2b\x87\x5b\x2a\x0e\xd3\xa0\xe2\x55\x98\x1c\x02\x4d\xd7\x28\x9b\x22\x4c\x3e\x24\x3f\x03\x66\xf2\x5e\x7b\x1b\x0c\x78\xb2\x5d\x3e\x5d\x6e\xd7\xee\xe8\xaa\x52\x5b\x8b\x24\xcd\x7c\x70\xb3\x19\x1f\xd2\x36\xeb\x75\x45\xd3\xe2\xc3\xd7\x6a\x8d\x75\x65\x2d\x3e\x5a\xaf\x35\xeb\xca\xfa\xd4\xdc\x7b\x72\xf6\x2c\x3e\x35\x03\xda\xb0\xaa\x8d\xa2\x0c\x13\x58\x3a\x4b\xd1\xfc\xd5\xb9\xb3\x13\xd1\x38\xf6\x5e\x1c\x0f\xbf\x38\x3a\xf9\xcf\xd7\xc3\x07\x47\xb3\x79\x9c\xd8\x82\xaa\x76\x6c\x0e\xae\x6f\x8e\x71\x60\x2f\x66\xbb\xa4\x39\x1b\x5d\x61\x2b\xd3\xed\x6d\x88\x2c\xea\xeb\x5c\xb5\xa4\x76\xa2\xb6\x79\x74\xc6\x3b\x78\x24\x92\xd7\x77\x87\xaf\xbc\xe3\xc3\x71\x52\x3b\x5b\x73\xa2\x9d\xd5\xf2\x35\xd6\x32\x76\x6f\x91\x6e\x2f\xaf\xd9\xd4\xe2\x7d\xb6\xf7\x2b\x32\x07\x0c\xf4\x78\xab\xaf\x98\x10\x22\x76\x3f\x5d\x7b\x2b\xed\x3f\x63\xf3\xf3\xe8\x2d\x4c\xe8\x52\x6c\xc6\x1b\xa0\xe7\x74\x7b\x73\x95\xec\xdc\x54\xa3\x90\x84\xcb\x87\x13\x2d\x75\x4d\x51\x75\xe5\xda\x35\xa5\xde\x69\xdc\x52\xc2\x41\x81\x98\x6a\x34\x6f\xd5\xd6\x1b\x6b\xc9\x89\xf5\x56\xfd\xa6\x32\xbd\x56\x1f\xdf\x7c\x16\x2f\x29\x5f\xc1\x2c\x58\x39\xbb\x72\x5d\xd7\xd7\x97\x02\x25\xe5\xbc\x5a\x90\xf6\xe5\xd7\x62\xd5\x39\x72\x70\x32\xea\x9c\x94\x52\xe4\x94\x58\x57\x51\xd5\x96\x1a\xed\x2d\x29\xaa\xde\x6c\x75\x74\xe5\x76\x43\xeb\x24\x66\x12\xa3\x1b\x8a\x5a\xbf\x51\x6b\x76\xd2\xd7\x8c\x67\x13\x33\xda\x8d\x56\x3b\x7d\x0d\x9f\x49\x8e\xde\xdc\xcc\x78\xfd\xe6\x66\xfa\x60\x6d\xa3\xb5\x39\xa2\xab\xd9\xda\xbc\x7e\x23\xfc\x42\x47\xad\x35\xb5\x5a\xbd\xd3\x68\x35\x53\x62\x7d\x01\xca\xd4\xe3\x02\xbc\xa6\x0f\x6b\x9d\x5a\x47\xd1\xdb\x6a\xeb\x46\xe3\xc3\x46\xe6\x7c\x60\x15\xc2\xb3\x6d\x45\xad\x71\x5a\xf8\x99\xdc\x18\x24\x57\x77\x6e\xeb\xf5\xd6\x9a\xa2\x2b\x1b\xed\xce\x9d\xe4\xf4\x9a\xb2\xde\xb8\xa5\xa8\x77\xa6\xd1\x3d\xda\x22\x53\x92\x6d\xb5\x51\x57\xf4\x5b\x8a\xaa\x8d\xa9\x49\xdf\x89\xa7\x43\xad\x8d\xf6\xba\xd2\x49\x93\x9d\x72\xbb\xdd\x50\x53\x4c\xa5\x90\xc0\xc8\x60\x4e\x33\x8c\x23\x65\x9d\x02\x86\x78\x09\xf4\xdc\xdc\xa7\x05\x89\xb1\x0d\xca\x15\xa3\x19\xb2\xa0\x0e\xf7\x1c\x44\x4a\x1d\x6d\x63\x86\xba\x03\xdd\x25\x99\x25\x9e\x39\xb6\x10\xcb\x77\xe0\xb8\x31\xe6\x61\x6f\xa2\x0d\x97\xc3\x0a\x4e\xf2\xd6\x0a\x57\x3e\x07\xd7\x57\xb6\x48\x03\x08\x04\xa5\x95\x0f\x98\x26\x81\x34\x33\x5d\xc9\xf4\x97\xc9\x64\x4d\xe4\x68\xb3\x53\xfb\xc4\xe5\x55\xb8\x05\x0b\xdb\x70\x70\x96\xbe\x3e\xeb\x43\xac\x0a\x34\x42\x3f\x38\x7f\xef\x4d\x87\x49\x5a\x10\xda\x21\x3d\xad\x1f\x7f\x17\xa9\x5b\xd1\x26\x43\xfe\x23\x23\x5d\x8a\x8a\x02\x5f\x9e\xe0\x8a\xff\xb7\x19\x5b\x6e\xb7\x66\x57\x4a\xbe\xfc\xf7\xcb\x9a\xe0\x5d\xd0\x77\x67\xe1\x3e\x2b\xe7\x1c\xb0\x99\x1c\x46\xbe\xc6\xac\x82\x81\xd8\x06\xb9\xf9\x9b\x66\xd6\x0a\x76\x4e\x22\x1e\x97\x52\xd0\xab\xf0\xd9\xc8\xdc\xca\x3b\x61\x95\x4a\x07\x6e\xf4\x9e\x56\xfc\x7f\xf7\x57\xfe\x17\x00\x00\xff\xff\x6b\xea\x62\xa7\x2c\x46\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

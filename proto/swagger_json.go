package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6e\xdb\xc8\x15\xbe\xf7\x53\x10\x6c\x2f\x83\x38\x4d\x8b\x5e\xe4\x4e\x2b\xd3\xb1\x10\x5b\x52\x29\x29\x48\x50\x04\xc4\x98\x1c\xcb\xb3\x26\x39\xcc\x70\xe8\x5a\x2d\x02\x38\xdd\x6e\x91\x6e\xd3\xc6\xc0\x66\xe3\x6c\x36\xe8\x62\xdb\x6d\x10\xb4\xe8\xba\x17\xc5\x26\xf0\x16\xe8\xcb\x98\x72\x72\xd5\x57\x28\x66\x48\x49\xfc\x95\xf8\x23\xc9\x52\xd7\x04\x02\x58\x33\x9c\x99\x73\xce\x9c\xef\xfc\xcd\x30\xbf\x5a\x11\x04\xd1\xfe\x05\xe8\x76\x21\x11\x6f\x08\xe2\xf5\xab\xd7\xc4\x2b\xac\x0d\x99\x3b\x58\xbc\x21\xb0\x7e\x41\x10\x29\xa2\x3a\x64\xfd\x16\xc1\x14\xaf\x1a\x48\x25\x58\x31\x80\xae\x2b\x98\x68\x90\x28\x5e\xb3\xf7\xf7\xb6\x63\x23\x13\xda\x76\xe4\xe7\x55\xfe\x0e\x9f\x5c\x10\xc4\x7d\x48\x6c\x84\x4d\x36\xa5\xff\xa7\x60\x62\x2a\xd8\x90\x8a\x2b\x82\xf0\x80\x93\xa0\x62\xd3\x76\x0c\x68\x8b\x37\x84\x9f\x7b\xa3\x80\x65\xe9\x48\x05\x14\x61\x73\xf5\x43\x1b\x9b\xec\xdd\x7b\xfc\x5d\x8b\x60\xcd\x51\x33\xbe\x0b\xe8\xae\x3d\xe2\x6d\x75\xff\x47\x1e\xa9\xab\xea\x2e\x54\xf7\x86\x1d\xec\x4d\x6c\xd3\xc0\x6f\x26\x2a\xc7\x30\x00\xe9\x31\xba\xdf\x7d\xf3\x67\xf7\x0f\x9f\x9d\x7f\xf2\x6d\xff\xf0\x61\xff\x2f\x87\xfd\x2f\xff\xea\x33\xc7\x5f\xc4\x16\x24\x7c\xf1\x9a\xc6\x5e\x6e\xb0\x05\x3e\xf0\x45\xd1\x82\x64\x1f\xa9\x50\xa9\xb2\xf5\x78\x4f\x8b\x02\x0a\x83\xc3\x09\xb4\x2d\x6c\xda\xd0\x0e\x2d\x2f\x08\xe2\xf5\x6b\xd7\x22\x4d\x82\x20\x6a\xd0\x56\x09\xb2\xa8\x2f\xd1\x8a\x60\x3b\xaa\x0a\x6d\x7b\xc7\xd1\x85\xc1\x4c\x57\x03\xd3\x7b\xac\xa8\xbb\xd0\x00\xb1\xc9\x04\x41\xfc\x21\x81\x3b\x6c\x9e\x1f\xac\x6a\x70\x07\x99\x88\xcd\x1b\xdd\xce\x08\xed\xb2\xbf\x8a\x18\x9a\xeb\x41\xe0\xd7\x83\xe0\xf2\xa2\x06\x77\x80\xa3\xd3\xc9\xac\x98\x82\x63\xc2\x03\x0b\xaa\x14\x6a\x02\x24\x04\x93\x21\x47\x65\x19\x22\x8e\x49\x91\x01\x25\x36\xe9\x18\xba\x57\x12\x38\x10\x2d\x40\x80\x01\x29\x24\x23\x8d\xf3\x9e\x08\x3b\x26\x30\x38\x6e\xb6\xb1\xd6\x8b\xd2\x8b\xcc\xb4\x1e\x02\xef\x3b\x88\x40\xa6\x39\x94\x38\x70\xb6\x1b\x77\xdf\x81\x36\xcd\xc2\xff\xbd\x00\xff\x14\x74\xa3\x9c\x27\xea\xf8\x68\xde\x7b\x2b\xc1\xf9\x7c\x59\x06\xc1\x87\x35\x18\xc4\x5e\x17\xa6\x43\xef\xfc\xe9\x97\xfd\x47\x47\xee\xd3\x93\xb3\xb7\x87\x1e\x0c\xcf\x4e\x7f\xef\x7e\xf2\x95\xfb\xe4\x4d\x5e\x0c\xde\x84\x26\x6f\x6f\x1f\x54\x19\x01\xcb\x04\xc1\x30\xe9\x97\x08\xf4\x9f\x14\x04\x3a\x48\x4b\x06\xe0\x7d\x07\x92\x71\x08\xdc\x01\xba\x1d\x85\x20\xed\x59\x7c\x52\x9b\x12\x64\x76\xa3\x83\x77\x30\x31\x00\x93\xac\x88\x4c\xfa\xd3\x9f\x88\x17\x84\xa6\x55\x78\x80\x42\xfe\x6b\x2c\xa6\x3c\x17\xe6\x7e\xfd\xec\xfd\x47\xaf\x3d\x4c\xb9\x4f\xde\xf4\x9f\x9f\xb8\x47\xaf\xdc\x7f\x3c\x77\x5f\xbe\x2e\xee\xdd\x24\x4e\xc7\x32\x41\x2b\x42\xfb\x25\xb6\xfc\x67\xb1\xb1\x75\x65\x32\xa5\xde\x36\xd3\x03\x45\x0d\x5b\xfb\xe9\xd2\x7c\x11\x80\x27\x90\x85\x90\x59\x83\x57\xf7\xd1\x17\xee\x77\xa7\x1e\xce\x73\x03\x9b\x2f\xc5\xbb\x96\x0b\xd4\x23\xba\x2f\x01\xed\x3f\x8b\x1f\xae\x06\x37\x6d\x41\x42\x55\x0d\x52\x80\xf4\xac\x8e\xf5\xdd\x1f\xdf\xb8\x4f\x9e\x79\x50\x7b\x77\xf2\xaa\xff\xd1\xc7\xf9\x63\x54\xca\xdb\xd7\xbc\x75\x97\x09\x73\x61\xd2\x2f\x61\xe7\x3f\x29\xb0\xfb\x3f\xf4\x4b\x7a\x8e\x10\x34\x88\x94\xbc\x18\x59\x47\xa6\xc6\x3b\x36\x97\x2d\xd6\x0c\x51\x7e\x89\x10\xff\x49\x41\x88\xbd\x8b\x2d\x05\x69\x8a\x1e\xde\x65\x61\x3a\x30\x01\x84\x80\xb8\xdf\xa3\xd0\x88\x2a\x8f\x30\x31\x50\x1d\x1f\xaa\x46\xb6\x91\x17\x3b\x75\x1d\xaa\x4c\xa0\xeb\xc3\x61\x86\xa3\x53\x94\x37\xc2\x65\x5b\xa1\x18\x90\x82\xab\x36\x05\x84\x2a\xec\xf7\x5c\x0c\x4a\x2e\xda\xa0\xa9\x2d\x14\x65\x16\xe8\xfa\x94\xf1\xbf\x4c\xc7\x98\x3e\x65\xc8\xa4\xb0\x1b\x8a\x99\x85\x98\x9a\xfc\xf8\x7a\x49\xca\x6d\xf4\xcb\x19\x08\xb5\x00\xe9\x73\xf2\x2f\x26\xa6\xec\xfd\x7c\x45\xfb\xfe\xd3\x93\xb3\xef\x9e\xbf\x3f\x7c\x71\x9e\xbf\x68\xef\x95\xdc\x08\xd0\x60\xdd\x5b\x7a\x99\x7c\x4d\x94\xf8\x4b\x77\xe3\x3f\x0b\x9f\x07\xc5\x77\x6e\x41\x92\x21\x7b\xcf\x29\x12\xdf\xb9\x9f\xfd\xd6\xfd\xf4\x61\xd1\x4c\xa8\xb5\xe7\x2c\x15\xee\x02\x74\x5f\x42\xce\x7f\xbe\x3f\x39\x90\x4d\xf3\x94\xe6\xfa\x5f\xfc\xab\xff\xec\x9f\xc1\xd3\xe5\xbc\x28\xe9\x58\xda\xa0\x66\xb2\x7c\x07\xcb\x51\xe2\x2f\xf1\xe2\x3f\x0b\xef\xa2\xe2\x3b\x77\x31\x2e\x6a\x78\x81\x24\x40\xea\xe8\xba\x47\xb6\x83\x9e\x00\x58\x07\xf6\x03\x6f\x7f\x08\xd5\x51\xd2\x29\x5a\x84\x61\x91\xa2\x08\x94\x44\x15\x1b\x06\x57\xb1\x10\xbc\x32\xd5\x3a\xf9\xc8\xb8\xc2\x07\xd5\x03\xd9\x4a\xf4\x58\x2f\x44\xe5\x36\xc6\x3a\x04\x66\x68\xdf\x03\x71\xfa\xa0\x7b\x25\xba\x07\x61\xdb\x95\xe9\xca\x40\x09\x19\x79\xf3\x33\x3b\x1f\xb3\x43\xe9\xb9\x78\x4a\x26\x9e\xc9\xc0\x17\x62\x73\xd1\x75\x41\x1f\xa3\x07\xd9\xc5\x97\x39\xfa\xf4\x7c\x49\x71\xf1\x62\x64\xb6\x3d\xea\x62\xf2\x8c\x94\x50\x44\xc8\x12\xf0\xa0\x0d\x10\xab\xf5\xbb\x41\x37\xd6\x69\xad\x0d\x28\x19\xda\x8e\x80\xe9\xe7\xaf\x8f\xa5\x25\x24\xdd\x52\x3b\x1c\xba\xb6\x92\x59\xa2\x32\xa4\xfc\xc2\x49\xe2\xc6\x1a\x76\x37\x6d\x5f\xa3\x4a\x9e\x49\xf2\xf1\x33\x94\x12\x1c\x3b\x48\x9b\x40\x5c\x8a\xed\x89\x54\xc1\x82\x0c\xf3\x52\x50\x56\x8e\x03\xe3\xc2\x3e\x3d\xf7\x70\x0b\xf4\x98\x19\xd2\x11\x34\xa9\x82\xac\x62\x14\xf0\x90\x6b\xa2\x4c\x12\x07\x87\x4f\xa3\x0b\xad\x1e\x39\x89\x12\x72\x21\xda\x3f\x50\x4a\x99\x5a\x47\xfb\x90\xf4\x94\xd0\x4d\xd0\xfc\x2b\x78\xb3\xd4\xd8\x24\x71\xa5\x1d\x2a\xdb\xf0\x82\xe9\xd9\xdb\xc3\xb3\xb7\x7f\x73\x4f\x8f\xdf\x7f\x7a\x7a\xfe\xe2\x37\x5e\x9a\x78\xfe\xcd\xb1\xd7\xee\x45\xc5\xff\xfd\xf7\x63\xf7\xd5\xaf\xfb\x7f\x7a\xe9\x1e\x3d\xee\x1f\x7f\xeb\x3e\xfe\xd8\x3d\xfa\xbb\xfb\xf5\x8b\xe1\x40\xf7\xd1\xe7\xfd\x97\xbf\xf3\x5a\xfc\xe3\x84\xac\xf0\x58\x74\x9b\x9f\x57\x59\x32\x98\x87\x75\xa4\x53\x02\x28\x6c\x23\x03\x6e\x41\x0a\xca\x30\x1f\xa8\x39\x17\x50\xe7\x61\x55\x78\xaa\xdc\x25\x1d\xaf\x2c\xec\xfe\xce\xd9\xa7\x33\xa1\x48\x26\x25\xbd\x14\xbf\x1e\xd4\x3c\x4c\x41\xcc\xd4\x14\xb3\xfc\x19\xb6\x2d\xe5\x72\xe3\xc2\xee\x5b\x31\x53\x9e\x49\x10\x89\x27\xe8\x0b\x2b\x08\xa0\xaa\xd8\x31\x53\x75\x78\x1c\xfc\x55\x8c\x4c\x85\x86\x43\xc4\x1c\xb4\xf9\xe1\xe5\x05\xc3\xaa\xb5\x8b\xad\x44\xe7\x9a\x37\x5e\x4e\xaa\x19\x2e\xec\xae\x7b\x23\xe6\x9d\x90\xec\x39\xc5\xc5\xdb\x18\x14\xd2\xca\xba\x3c\x6c\x29\xb3\x08\x89\xb1\x55\x30\x22\xc5\x96\x62\xe9\x80\xb2\x45\x0a\x0e\xf7\x62\xda\x69\x1a\xb1\x78\x2c\x58\x26\x01\xb1\x21\x51\x46\xe1\x69\xaa\xe8\x93\x0e\x2d\xd3\x8f\x2c\x73\xb0\x11\xbd\xfd\x95\x3b\x48\xda\xe5\x42\x4e\x0a\xdd\x67\x89\x96\x5d\x6c\x95\xb5\x49\x7c\xa2\x9b\x18\x6b\x76\x29\xfe\xf7\x9c\xc2\x19\x8f\x45\xf2\xa8\x66\xd0\x2f\x19\x19\xdc\x52\x7e\x98\xfa\x65\xd8\xdc\xe4\x10\xa8\x39\x6a\xd1\xbc\x75\xf4\xf5\xdc\x7c\x82\xb1\x48\xa8\x38\x95\xc2\x5f\x11\xbe\x67\x61\x67\xfd\x1b\x45\x53\x9f\xb7\x64\x69\x62\x1a\x45\x89\xa2\x62\x8e\x9e\x57\x09\xf9\xec\x0c\x1b\x9d\x1e\x89\x59\xa0\xa7\x94\x5b\xa0\x09\x7a\x13\xd6\x30\xb0\x09\x7b\x85\xa4\xce\x4b\x01\x53\xcf\x41\xe3\x64\x17\xaa\x81\x36\x2b\x77\x15\x59\xaa\xac\x85\x2a\xa1\xbc\xb1\x53\x8f\x36\xad\x57\x6a\x9b\xd2\x5a\xb4\xb5\xd5\xa9\x56\xa5\x56\x2b\xda\x5c\xad\xd4\xab\xd2\xe6\xd8\x82\xea\x68\xed\x49\x7c\xb6\x54\x68\xc2\xb2\x3e\xde\xa6\x98\xc0\xc2\xa5\xa7\x16\x1b\x9d\xb9\xe4\xe4\xdd\x06\x72\x5f\x9e\xf6\x3f\x3f\x39\xfb\xcf\x57\xfd\x87\x27\x93\x79\x1c\xf9\xd2\xb2\x71\xc0\x0c\x4c\xcf\x0c\xf3\xa8\x6e\xc4\xf7\x0b\x33\x0e\x5a\xbc\x58\x23\x39\x5e\x09\x5a\x2c\xa6\x73\xe5\x2a\x95\x23\xb5\xcd\xa2\x33\xee\xd1\x63\xaf\x22\xf9\xfe\xf8\xb5\x7b\x7a\x3c\xac\x54\x4e\xd6\x9c\xf0\x75\x99\xf9\xfa\xcf\x45\xda\xbd\xac\x66\xb3\x15\xbd\x3c\x31\x5f\x91\xcd\xc3\x5d\xcd\xd4\xdf\x5e\xc4\x81\xf1\x88\xae\x0b\x0e\x18\x97\x33\x92\xc9\x25\xe1\xe2\xe1\x44\x43\x5e\x93\x64\x45\x5a\x5f\x97\xaa\xed\xda\x6d\x29\x18\x14\x78\x5d\x9b\x8d\xea\xad\x70\x0c\xe1\xb5\xd7\xea\xb7\x2b\x9b\xb5\xf1\x07\xb0\xd1\xc9\x27\xf1\x92\x70\xb5\x71\xc1\xce\x28\x4b\x1f\xd6\x31\x7d\xc9\x71\x4e\x98\x55\x0b\x92\xae\xf3\x2e\x56\x9d\x30\x03\x27\x4d\xd0\x2d\x7d\xf6\x34\xbc\xb9\x3f\x9d\x7a\xd0\x95\xc8\xcc\xfc\x66\xfd\xdc\x4a\x4d\x83\xfb\x01\x85\x90\x9d\x10\xe6\x4b\xb2\xdc\x90\x23\x0d\x8a\x2c\xfd\xac\x23\xb5\xda\xca\x5a\xa5\x5d\x51\xd6\x1b\xf2\x56\xa5\x1d\xbe\x64\x21\xc9\x4a\xbd\xd1\x56\xa4\x3b\xb5\x56\xbc\x27\xd6\xba\x25\xc9\xd5\x8d\x4a\xbd\x9d\x3c\x66\xd8\x1b\xeb\x69\x6d\x34\x9a\xc9\x63\x78\x4f\xbc\xf5\x56\x27\xe5\xf5\x5b\x9d\xe4\xc6\xca\x56\xa3\x33\xa0\xab\xde\xe8\xdc\xdc\x08\xbe\xd0\x96\x2b\xf5\x56\xa5\xda\xae\x35\xea\x09\x69\x93\x67\xc8\x12\x97\xf3\x6d\x5c\x72\x73\xab\x5d\x69\x4b\x4a\x53\x6e\x6c\xd4\x3e\xa8\xa5\xf6\x27\x98\xd8\xa6\x24\x57\x38\x2d\x7c\x4d\x6e\x40\xe3\xa3\xdb\x77\x94\x6a\x63\x4d\x52\xa4\xad\x66\xfb\x6e\xbc\x7b\x4d\xda\xac\xdd\x96\xe4\xbb\xe3\xe8\x1e\x4c\x91\x2a\xc9\xa6\x5c\xab\x4a\xca\x6d\x49\x6e\x0d\xa9\x49\x9e\x89\xa7\x90\x8d\xad\xe6\xa6\xd4\x4e\x92\x9d\x74\xa7\x59\x93\x13\xdc\x8b\x27\x81\x81\x33\x09\x74\x87\xd4\xb2\xdd\x68\x28\x5b\x9d\xea\xc6\x58\x6f\x33\x50\xf8\x31\x80\x8a\x9e\xcb\x5c\x58\x4c\x62\x40\xa2\xee\x82\x62\x27\x64\xfc\x03\x2a\x78\x60\x21\x52\x68\x69\x13\x53\xb4\xd3\x53\x1c\x32\xe9\x1c\x37\x71\x74\xc9\x8a\x56\xf1\xbb\x2a\xdc\xc3\xf1\x5c\x22\x76\x61\x25\x83\x25\x1d\x15\x03\x4a\x6c\xf9\x0c\xe2\x89\xa2\x95\x63\x40\x20\x28\xac\x7c\x40\xd3\x08\xb4\x53\x73\xc0\xd4\x20\x24\x9e\x01\x7b\x89\xef\xe4\x7a\x49\x6c\xf3\x4a\xec\x42\xbe\xba\x5e\x06\xdd\x48\xbb\xb2\x5c\x82\x46\xc8\x32\x9e\xb9\x9f\x84\x8e\x72\xad\xc0\x0c\xc9\xb5\x92\xe1\x17\x04\xfc\xab\xc1\x42\xb9\x4b\xe8\xe8\xb4\xa4\xc0\x97\x27\x62\xe5\xff\x81\xe1\xb6\xb3\x53\x31\x4b\x65\xb4\xec\xfd\xa2\x26\x78\x1f\xe8\xce\x24\xdc\xa7\x25\xf2\x3d\x3a\x91\xc3\xd0\x77\x0b\x65\x30\x10\x99\x20\x33\x7f\xe3\xcc\x5a\xf1\xf0\xdd\x80\xb6\x0d\xba\x85\xec\xa5\xe7\xb4\x66\x56\x33\x0b\xaa\x54\x32\x70\xc3\xfb\xb4\xc2\xfe\x3d\x58\xf9\x5f\x00\x00\x00\xff\xff\x5a\x5d\x2c\x2f\xb6\x53\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

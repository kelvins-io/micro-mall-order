package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xdb\xc8\x15\x7e\xf7\xaf\x20\xd8\x3e\x2e\xe2\x34\x2d\xfa\x90\x37\xad\xcc\xc4\x42\x6c\xc9\xd0\x25\x58\xa3\x08\x88\x31\x39\x92\x67\x2d\x72\x98\x99\xa1\x6b\xa1\x30\xe0\xed\x76\x8b\x74\xeb\x36\x06\x36\x89\x73\x31\x1a\xa4\x4d\x82\xa0\x45\xe3\x3e\x14\x49\xe0\x14\xe8\x9f\x31\xe5\xf8\xa9\x7f\xa1\xe0\x90\x92\xc8\x21\x29\xf1\x62\xc5\x72\x6b\x02\x01\xac\x19\xce\x99\x73\xe6\x9c\xef\xdc\x86\xf9\xd5\x9c\x24\xc9\xf4\x97\xa0\xd3\x81\x44\xbe\x2e\xc9\xd7\xae\x5c\x95\xbf\x70\xc7\x90\xd9\xc6\xf2\x75\xc9\x9d\x97\x24\x99\x21\xd6\x85\xee\xbc\x45\x30\xc3\xf3\x06\xd2\x08\x56\x0d\xd0\xed\xaa\x98\xe8\x90\xa8\xde\xb0\xf7\xf7\x9a\x4d\x91\x09\x29\x15\x7e\x5e\xe1\xef\x70\xe2\x92\x24\x6f\x42\x42\x11\x36\x5d\x92\xfe\x9f\x92\x89\x99\x44\x21\x93\xe7\x24\x69\x9b\xb3\xa0\x61\x93\xda\x06\xa4\xf2\x75\xe9\x17\xde\x2a\x60\x59\x5d\xa4\x01\x86\xb0\x39\xff\x35\xc5\xa6\xfb\xee\x1d\xfe\xae\x45\xb0\x6e\x6b\x29\xdf\x05\x6c\x9d\x8e\x64\x9b\xdf\xfc\x89\xc7\xea\xbc\x86\x75\x38\x1c\x97\x24\xb9\x03\x59\xe0\xa7\x7b\x50\xb6\x61\x00\xd2\x73\xb9\x3e\x79\xf0\xbc\x7f\x6f\xcf\x79\x70\x78\xfc\x61\xe7\xd3\xdb\x3f\x3b\x7f\x78\x78\x7c\xf4\x7b\xe7\xfb\x17\xce\xfd\xf7\xbe\x8c\x7c\x05\xb6\x20\xe1\x3c\x54\x74\x77\x55\xcd\xdd\xe7\x4b\xff\x44\x1a\x90\x6c\x22\x0d\xaa\x37\xa1\xc9\xc7\x9b\x5b\x65\x97\x81\xc0\x6a\x02\xa9\x85\x4d\x0a\x69\x88\x0d\x49\x92\xaf\x5d\xbd\x2a\x0c\x49\x92\xac\x43\xaa\x11\x64\x31\xff\x5c\x4b\x12\xb5\x35\x0d\x52\xda\xb6\xbb\xd2\x80\xd2\x95\x00\x79\x4f\x24\x6d\x1d\x1a\x20\x42\x4c\x92\xe4\x1f\x13\xd8\x76\xe9\xfc\x68\x5e\x87\x6d\x64\x22\x97\xae\xa8\xd4\x30\xeb\x75\x7f\x13\x39\x44\x6a\x3b\xf0\x6b\x3b\xb8\xbb\xac\xc3\x36\xb0\xbb\x6c\xb2\x24\xa6\x64\x9b\x70\xcb\x82\x1a\x83\xba\x04\x09\xc1\x64\x28\x50\x51\x79\x88\x6d\x32\x64\x40\xc5\x25\x3a\x86\xef\xb9\x18\x09\x64\x0b\x10\x60\x40\x06\xc9\xc8\xec\xbc\x47\x10\xc7\x04\x06\x07\x8f\x8d\x74\x91\x5d\xc4\x05\xbc\x6b\x43\xd2\x13\xa7\x08\xbc\x6b\x23\x02\x5d\xbb\x69\x83\x2e\x85\xc2\x34\xeb\x59\x9c\x28\x65\x04\x99\x1d\x71\x71\x1b\x13\x03\xb8\x27\x2b\x23\x93\xfd\xfc\x67\x72\xac\x2c\x77\x02\xb2\x30\xd0\x11\xa5\x88\xb5\xd6\x11\xa5\x3b\x73\x41\x7a\xfe\xb9\x08\x68\x9a\x87\x5b\x88\xb2\xb4\x98\xea\xff\x65\xa7\xff\xfc\x95\xf3\xf2\xd1\xe9\xb7\x6f\x3c\x4c\x39\xf7\xdf\xf7\x1f\x1f\x3a\x7b\xaf\x9d\xbf\x3f\x76\x0e\xde\x64\x45\x56\x79\x1d\x6a\x1b\x7c\x46\xe1\x7c\x5c\x24\x68\x09\xbc\x5f\x62\xcb\x7f\x66\x1b\x5b\x5f\x4c\xe6\xd4\x53\x33\xdb\x52\xb5\xb0\xb7\x3f\x5b\x9e\xcf\x03\xf0\x04\x02\x16\x0a\xa0\x16\xa6\xc9\x68\x77\xee\x3d\x73\x3e\x1e\x79\x38\xcf\x0c\x6c\xbe\x15\x9f\xba\x58\xa0\x1e\xf1\x7d\x09\x68\xff\x49\x80\xc9\x1a\xd6\x23\x10\xf0\xd0\x11\x37\x13\x00\x07\x23\xb6\x88\x8d\x33\x54\xda\x5d\x1b\x52\x96\x46\xf6\xe9\x62\x4d\x87\x0c\xa0\x6e\xda\xc0\xfa\xe9\x8f\xef\x9d\xfb\x8f\x3c\xa8\x7d\x3a\x7c\xdd\xff\xf6\xbb\xec\x39\x2a\xe3\xe3\x0b\xde\xbe\x17\x09\x73\x61\xd6\x2f\x61\xe7\x3f\x09\xb0\xfb\x1f\x8c\x4b\x26\x66\xee\xfb\x69\xe3\x92\x07\x93\xfe\x83\xc3\xe3\x8f\x8f\x4f\x77\x9e\x9e\x3c\x7f\x95\x15\x2c\x5e\x49\x44\x80\x0e\xab\xde\xd6\x17\x09\x2e\x22\xf3\x97\x80\xf1\x9f\x99\x8f\x53\x51\xcd\xcd\x48\xb0\xa2\x1b\x76\x9e\x48\xe5\x3c\xfc\xad\xf3\xc3\x37\x79\x23\x55\x63\xc3\xbe\x50\xb8\x0b\xf0\x7d\x09\x39\xff\xf9\xff\x89\x51\x94\x65\x29\x9d\xfa\xcf\xfe\xd9\x7f\xf4\x0f\x0f\x25\x27\xdf\xbf\xeb\xef\x64\x46\x49\xcb\xd2\x07\x39\x6d\x83\x6f\x7d\x91\xa0\x22\x32\x7f\x89\x17\xff\x99\xf9\x10\x15\xd5\xdc\xf9\x84\xa8\xe1\x1d\x43\x80\xd5\xd1\x8d\x40\xba\x46\x5c\x00\xac\x03\xff\x81\xd7\xbe\x86\xda\xa8\xcd\x28\x5b\xc4\xc5\x22\x43\x02\x94\x64\x0d\x1b\x06\x37\xb1\x10\xbc\x52\xd5\xa2\x7c\x65\xd4\xe0\x83\xe6\x81\xa8\x2a\xb6\x5d\x43\x5c\xae\x61\xdc\x85\xc0\x0c\xe9\x3d\xd0\xd4\x1a\x4c\xcf\x89\x3a\x08\xfb\x2e\x91\x2f\x64\x36\x3d\xfa\x91\x53\x11\xba\x68\x32\x34\x6d\x23\xa4\x3d\xb9\x5c\x5d\x0d\x3a\xa0\x56\x63\x61\xb0\xfb\x50\xeb\x01\xd0\xf2\xd7\xc7\xf2\x12\x3a\xa3\x42\x7a\x0a\x5d\x08\xa5\xd6\x52\x1d\x32\x7e\x95\x13\xab\x1e\x83\x76\x92\x34\x23\xc6\x9f\x54\x27\x1f\xed\x4e\x14\x90\xd8\x46\xfa\x04\xe6\x12\xac\x46\x68\x85\x06\x05\x76\xfd\x5c\x6a\x89\x03\xeb\xc2\xde\x38\xf3\x72\x0b\xf4\x20\x51\xb5\x2e\x82\x26\x53\x91\x95\x8f\x03\x1e\x2c\x27\x9e\x49\xec\xe2\x70\x9f\x37\xd7\xee\x42\x8f\x47\xca\x54\x09\xf8\xad\x9a\x04\xd2\x5d\xb4\x09\x49\x4f\x0d\x5d\xf3\x66\xdf\xc1\xa3\x52\x71\x89\x44\x8d\x76\x68\x6c\xc3\xdb\xe3\xe3\x0f\x3b\xc7\x1f\xfe\xea\x1c\xed\x9f\xfe\x70\x74\xf2\xf4\x37\x5e\x82\x7f\xf2\x76\xdf\x1b\xf7\xf2\x99\xff\xfc\x6b\xd7\x79\xfd\xeb\xfe\x9f\x0e\x9c\xbd\xdd\xfe\xfe\x3b\x67\xf7\x3b\x67\xef\x6f\xce\xcb\xa7\xc3\x85\xce\xbd\x27\xfd\x83\xdf\x79\x23\x7e\xf7\x38\x2d\x3c\x66\xdd\x73\x67\x35\x96\x14\xee\x21\xe1\x86\x76\x66\x8f\x20\x1f\x6a\x52\x1d\x44\x6c\x1b\x70\x66\x0f\x02\x68\x1a\xb6\xcd\xc4\x20\x3e\xce\x71\x68\x18\x99\x2a\x0b\x47\xe3\x0c\xbc\xf9\x91\x3c\x96\x74\x77\x4c\x5e\x01\x08\x01\xe1\x6c\x52\x46\x0c\x1a\x62\x19\x91\x92\x8f\xc6\x3a\xb6\x62\xfd\x58\x28\x2b\xce\xa0\xf8\x60\x61\x3d\xb3\x5a\xf7\x56\x7c\xbe\x53\x1e\xb6\x4a\x72\x1f\x6f\x6d\x50\x6d\x2e\x43\x06\x8a\x1c\x2c\xb6\xd4\x69\x64\x1f\xd8\xca\x19\xfc\xb1\xa5\x5a\x5d\xc0\xdc\x4d\x72\x2e\xf7\xd2\x87\xb3\x74\x62\xd1\xb0\x5b\x24\xd7\xa3\x90\xa8\xa3\x4c\x20\xf1\xe8\x91\xc9\x60\x27\x74\xd1\x2a\x9e\xfd\x4f\xaf\xe5\x12\x43\xbc\xc2\xca\x2a\x00\x5d\xe7\x87\x1c\x97\x25\x4d\x13\x2d\xeb\xd8\x2a\xea\x93\x38\xa1\x9b\x18\xeb\xb4\x90\xfc\x1b\x76\xee\xe4\xd2\x22\x59\x4c\x33\x18\x97\x8c\x14\x61\x29\x3b\x4c\xfd\x5e\x45\x66\x76\x08\xd4\x6d\x2d\x6f\x89\x30\xfa\x0a\xf1\x0c\x84\x49\xab\xf6\x15\xd0\xe3\xbd\x8f\xfc\xe5\xf2\x4a\x69\x55\xad\x2b\xa5\x85\x50\xd1\xcc\x07\x5b\x55\x71\xa8\xd1\x2a\x97\x95\x46\x43\x1c\xbe\x51\xaa\x2c\x29\xe3\xab\xec\xd1\x2e\x93\x24\x6a\x68\xd0\x84\x45\xbd\x11\x65\x98\xc0\xdc\xf5\x48\xc3\x5d\x9d\xba\x0e\xf1\x2e\xf7\x9c\x83\xa3\xfe\x93\xc3\xe3\x7f\xbf\xe8\x7f\x73\x38\x59\xc6\x11\xea\x8b\x7a\xac\x29\x04\xb9\x29\x66\x7c\x1d\xc1\x4b\x49\x53\x76\xaf\x9e\x57\x8c\xf7\xac\x01\xb6\xa8\x6b\x73\xc5\xca\xd7\x91\xd9\xa6\xb1\x19\x67\x6f\xd7\x2b\x53\x4f\xf7\xdf\x38\x47\xfb\xc3\xf2\x75\xb2\xe5\x84\x6f\xbf\x32\xa7\x45\x9c\x62\x5e\x37\x3f\x4b\xda\x4b\xeb\x20\xb9\x77\x54\x4c\xc6\xef\x3a\xce\xe9\xdc\xc4\xfb\x98\x8c\x96\x35\xf4\xef\xf1\xb1\x17\xf4\xd4\x62\x1b\x84\x62\x48\xce\x13\xce\x1f\x7f\x6a\xf5\x05\xa5\xae\x2a\x37\x6e\x28\xe5\x66\xe5\xb6\x12\x8c\x2d\xde\x54\xa5\x7a\xbb\xb4\x54\x59\x88\x4e\x2c\xd5\xca\xb7\x26\x84\x1d\x91\xf8\x24\x59\x62\x2e\xbc\x67\xac\xff\x59\xb8\x11\xe8\xda\x4b\x86\x1e\x64\x5a\x2b\x88\xfb\xc8\x63\xb6\x0a\xe3\x14\x92\x0c\x5a\xed\xb9\x0c\x39\x26\x39\x52\xea\xf5\x5a\x3d\x7c\x19\xa1\xd4\xd5\x6a\xad\xa9\x2a\x5f\x55\x1a\xcd\xc8\x4c\x64\x74\x59\xa9\x97\x17\x4b\xd5\x66\xfc\x9a\xe1\x6c\x64\xa6\xb1\x58\x5b\x89\x5f\xc3\x67\xa2\xa3\xb7\x5a\x09\xaf\xdf\x6a\xc5\x0f\x96\x96\x6b\xad\x01\x5f\xd5\x5a\xeb\xe6\x62\xf0\x85\x66\xbd\x54\x6d\x94\xca\xcd\x4a\xad\x3a\x48\x0e\x23\xe8\x8d\xdd\xce\xc7\x6b\xfc\x70\xa3\x59\x6a\x2a\xea\x4a\xbd\xb6\x58\xf9\xb2\x92\x38\xef\x7b\x85\xe0\xec\x8a\x52\x2f\x71\x5e\xf8\x9e\xdc\x19\x44\x57\x37\xbf\x52\xcb\xb5\x05\x45\x55\x96\x57\x9a\xab\xd1\xe9\x05\x65\xa9\x72\x5b\xa9\xaf\x8e\xe3\x7b\x40\x62\xf4\xca\x38\xdf\x34\xb0\x97\x31\xf6\x28\xb6\xad\xce\x2d\x82\x19\x90\x68\xeb\x20\x5f\x03\x91\x21\x03\xaa\x70\xcb\x42\x24\xd7\xd6\x26\x66\xa8\xdd\x53\x6d\x92\x58\x96\x4f\xf1\xda\x27\xff\xad\x09\xf7\x87\x3c\x81\x89\x5c\x9d\xa4\x70\x44\xa3\x0a\xa4\x80\xca\xa7\x10\x7d\xf2\x16\xd6\x80\x40\x90\xdb\xf8\x80\xae\x13\x48\x13\x13\xcf\xc4\x90\x15\x4d\xbb\xbd\x6c\x7b\x72\x91\x16\x51\x5e\x01\x2d\x18\xd8\x84\xbd\xb3\x0c\xb7\x49\x9f\x3d\x14\xe0\x11\xba\xf9\xf1\x67\x6f\x14\x8f\x32\xf3\x00\x85\xf8\x02\x6d\xf8\x15\x92\x6a\x84\x1b\xc3\xe9\xb7\x0c\x75\x96\x0b\x1e\xf8\xc5\xc9\x6f\xf8\xff\x93\x5d\xb3\xdb\x25\xb3\x50\xfd\xe3\xbe\x9f\xd7\x05\x6f\x82\xae\x3d\x09\xf7\x09\x9e\x68\xad\xc7\x26\x4a\x18\xfa\xf6\xa9\x08\x06\x04\x02\xa9\xe5\x1b\xe7\xd6\x32\x76\xbb\x43\x11\x97\x52\xd0\x29\x70\xd5\x3f\xb5\x42\x3d\x68\x52\xf1\xc0\x0d\xeb\x69\xce\xfd\xb7\x3d\xf7\xdf\x00\x00\x00\xff\xff\x38\xac\x61\x30\x1d\x3e\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

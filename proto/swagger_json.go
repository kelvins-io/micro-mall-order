package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1c\x4d\x6f\xdb\xc8\xf5\xee\x5f\x41\xb0\x3d\x06\x71\x9a\x16\x3d\xe4\xa6\x95\xe9\x44\x88\x2d\xa9\x94\x14\x24\x28\x02\x62\x42\x8e\x65\xae\x49\x0e\x33\x1c\xba\x56\x8b\x00\x4e\xb7\x5b\xa4\xdb\xb4\x31\xb0\xd9\x38\x9b\x0d\xba\xd8\x76\x1b\x04\x2d\xba\xee\xa1\xd8\x04\xde\x02\xfd\x33\xa6\x9c\x9c\xfa\x17\x8a\x99\xa1\x24\x7e\x4a\xfc\x90\x64\x69\x2b\x02\x01\xac\x19\xce\xcc\x7b\x6f\xde\xf7\x7b\xcc\xaf\xd6\x04\x41\x74\x7e\x01\xba\x5d\x88\xc5\x6b\x82\x78\xf5\xf2\x15\xf1\x12\x1d\xd3\xad\x1d\x24\x5e\x13\xe8\xbc\x20\x88\x44\x27\x06\xa4\xf3\x36\x46\x04\xad\x9b\xba\x8a\x91\x62\x02\xc3\x50\x10\xd6\x20\x56\xf8\x30\xff\xfb\x9e\xeb\xe8\x16\x74\x9c\xc8\xcf\xcb\xec\x1d\xb6\xb9\x20\x88\xfb\x10\x3b\x3a\xb2\xe8\x96\xfe\x9f\x82\x85\x88\xe0\x40\x22\xae\x09\xc2\x03\x06\x82\x8a\x2c\xc7\x35\xa1\x23\x5e\x13\x7e\xce\x57\x01\xdb\x36\x74\x15\x10\x1d\x59\xeb\x1f\x3a\xc8\xa2\xef\xde\x65\xef\xda\x18\x69\xae\x9a\xf1\x5d\x40\x76\x9d\x11\x6e\xeb\xfb\x3f\xe2\xa0\xae\xab\xbb\x50\xdd\x1b\x4e\xd0\x37\x91\x43\x02\xbf\x29\xa9\x5c\xd3\x04\xb8\x47\xe1\x7e\xf7\xcd\x9f\xbd\x3f\x7c\x76\xfe\xc9\xb7\xfd\xc3\x87\xfd\xbf\x1c\xf6\xbf\xfc\xab\x8f\x1c\x7b\x11\xd9\x10\xb3\xc3\x6b\x1a\x7d\xb9\x41\x0f\xf8\xc0\x27\x45\x0b\xe2\x7d\x5d\x85\x4a\x95\x9e\xc7\x66\x5a\x04\x10\x18\x5c\x8e\xa1\x63\x23\xcb\x81\x4e\xe8\x78\x41\x10\xaf\x5e\xb9\x12\x19\x12\x04\x51\x83\x8e\x8a\x75\x9b\xf8\x14\xad\x08\x8e\xab\xaa\xd0\x71\x76\x5c\x43\x18\xec\x74\x39\xb0\x3d\x47\x45\xdd\x85\x26\x88\x6d\x26\x08\xe2\x0f\x31\xdc\xa1\xfb\xfc\x60\x5d\x83\x3b\xba\xa5\xd3\x7d\xa3\xd7\x19\x81\x5d\xf6\x4f\x11\x43\x7b\x3d\x08\xfc\x7a\x10\x3c\x5e\xd4\xe0\x0e\x70\x0d\x32\x19\x15\x4b\x70\x2d\x78\x60\x43\x95\x40\x4d\x80\x18\x23\x3c\xc4\xa8\x2c\x42\xd8\xb5\x88\x6e\x42\x89\x6e\x3a\x06\xee\xb5\x04\x0c\x44\x1b\x60\x60\x42\x02\xf1\x88\xe3\xf8\x13\x41\xc7\x02\x26\x93\x9b\x7b\x48\xeb\x45\xe1\xd5\xad\xb4\x19\x0c\xef\xbb\x3a\x86\x94\x73\x08\x76\xe1\x6c\x2f\xee\xbe\x0b\x1d\x92\x05\xff\xbb\x01\xfc\x09\xe8\x46\x31\x4f\xe4\xf1\xd1\xbe\x77\xd7\x82\xfb\xf9\xb4\x0c\x0a\x1f\xd2\x60\x50\xf6\xba\x30\x5d\xf4\xce\x9f\x7e\xd9\x7f\x74\xe4\x3d\x3d\x39\x7b\x7b\xc8\xc5\xf0\xec\xf4\xf7\xde\x27\x5f\x79\x4f\xde\xe4\x95\xc1\xeb\xd0\x62\xe3\xed\x83\x2a\x05\x60\x99\x44\x30\x0c\xfa\x4a\x02\xfd\x27\x45\x02\x5d\x5d\x4b\x16\xc0\xfb\x2e\xc4\xe3\x24\x70\x07\x18\x4e\x54\x04\x49\xcf\x66\x9b\x3a\x04\xeb\x56\x37\xba\x78\x07\x61\x13\x50\xca\x8a\xba\x45\x7e\xfa\x13\xf1\x82\xa4\x69\x1d\x1e\xe8\x21\xfb\x35\x56\xa6\xb8\x09\xf3\xbe\x7e\xf6\xfe\xa3\xd7\x5c\xa6\xbc\x27\x6f\xfa\xcf\x4f\xbc\xa3\x57\xde\x3f\x9e\x7b\x2f\x5f\x17\xb7\x6e\x12\x83\x63\x99\x44\x2b\x02\xfb\x4a\xb6\xfc\x67\xb1\x65\xeb\xd2\x64\x48\xf9\x35\x93\x03\x45\x0d\x6b\xfb\xe9\xc2\x7c\x11\x02\x8f\x21\x75\x21\xb3\x3a\xaf\xde\xa3\x2f\xbc\xef\x4e\xb9\x9c\xe7\x16\x6c\x76\x14\x9b\x5a\x2e\xa1\x1e\xc1\xbd\x12\x68\xff\x59\x7c\x77\x35\x78\x69\x0b\xe2\xaa\x6a\x90\x00\xdd\xc8\x6a\x58\xdf\xfd\xf1\x8d\xf7\xe4\x19\x17\xb5\x77\x27\xaf\xfa\x1f\x7d\x9c\xdf\x47\x25\x6c\x7c\x83\x9f\xbb\x4c\x32\x17\x06\x7d\x25\x76\xfe\x93\x22\x76\xdf\x43\xbb\x64\xe4\x70\x41\x83\x92\x92\x57\x46\x36\x75\x4b\x63\x13\x5b\xcb\xe6\x6b\x86\x20\x5f\x49\x88\xff\xa4\x48\x88\xb3\x8b\x6c\x45\xd7\x14\x23\x7c\xcb\xc2\x74\xc4\x04\x60\x0c\xe2\x76\x8f\x40\x33\xca\x3c\xc2\x44\x47\x75\xbc\xab\x1a\xb9\x46\x96\xec\x34\x0c\xa8\x52\x82\x6e\x0e\x97\x99\xae\x41\xf4\xbc\x1e\xae\xbb\xa2\xce\x18\xea\x50\x46\x55\x4c\x48\xc0\x65\x87\x00\x4c\x14\xfa\x7b\x2e\xea\x36\x17\x6c\xd0\xd2\x16\x0a\x32\x1b\x74\x7d\xc8\xd8\x5f\x96\x6b\x4e\x1f\x32\xdd\x22\xb0\x1b\x8a\x28\x84\x18\x9b\xfc\xf8\x6a\x49\xc8\x1d\xfd\x97\x33\x20\x6a\x01\xd0\xe7\x64\x7d\x2d\x44\xe8\xfb\xf9\x4a\x1a\xfd\xa7\x27\x67\xdf\x3d\x7f\x7f\xf8\xe2\x3c\x7f\x49\x83\x27\x24\x31\xd0\x60\x9d\x1f\xbd\x4c\x96\x38\x0a\xfc\xca\x18\xfb\xcf\xc2\x47\x89\xf1\x9b\x5b\x90\x50\x91\xfa\x2b\xeb\xba\xe5\xd0\xbb\xce\xea\x06\x7b\xa7\xc7\xef\x3f\xf5\x73\x33\x3c\xf5\x5a\xac\xbc\x58\xe3\xc7\xb6\x76\x91\xbd\x7c\xc9\x9a\x28\xf0\x2b\x59\xf4\x9f\xa5\x4f\xc1\xfa\x2e\xfc\x92\x40\xcb\xb9\xf2\xfb\x16\x95\x3b\x7b\x6e\x91\xa0\xdc\xfb\xec\xb7\xde\xa7\x0f\x8b\xa6\xaf\x5a\x7b\xee\x52\xa9\xa0\x00\xdc\x2b\xed\xe3\x3f\xff\x3f\x89\x2b\x87\xe4\xa9\xa7\xf4\xbf\xf8\x57\xff\xd9\x3f\x83\x2d\x41\x79\xa5\xa4\x63\x6b\x83\x44\xf7\xf2\x75\x03\x45\x81\x5f\xc9\x8b\xff\x2c\xbc\xe7\x1c\xbf\xb9\x8b\xf1\x9c\x87\x5d\x7f\x01\x50\x47\x3d\x7a\xd9\xaa\xf3\x01\x61\x1d\xe8\x0f\x74\xef\x43\xea\x79\x5f\x1a\x0a\x31\xa6\xb2\x48\xf4\x88\x28\x89\x2a\x32\x4d\xc6\x62\x21\xf1\xca\x54\xa0\x62\x2b\xe3\x0c\x1f\x64\x0f\xdd\x51\xa2\xbd\x18\x21\x28\xef\x21\x64\x40\x60\x85\xee\x3d\xe0\xb8\x0c\xa6\xd7\xa2\x77\x10\xd6\x5d\x99\xfa\xbc\x4a\xd0\x68\xe4\x0a\xc5\xf4\x50\x7a\x8a\x30\x25\x41\x98\x49\xc1\x17\x42\x73\xd1\x79\xc1\x18\xc3\x07\xd9\xc9\x97\x39\x28\xe6\xb6\xa4\x38\x79\x91\x6e\xb5\x39\x74\x31\x7a\x46\xfc\x6d\x11\x5a\xae\x19\xd2\x01\x62\xb5\x7e\x27\x68\xc6\x3a\xad\x8d\x01\x24\x43\xdd\x11\x50\xfd\xec\xf5\xb1\xb0\x84\xa8\x5b\xea\x86\x43\xbd\x86\x99\x29\x2a\x43\xc2\xba\x04\x13\x2f\xd6\x74\xba\x69\xf7\x1a\x65\xf2\x4c\x94\x8f\x17\xbe\x4b\x60\x4c\xc3\xc3\xf1\xc0\xa5\xe8\x9e\x48\xd0\x14\x44\x98\x65\xa8\xb3\x62\x1c\x58\x17\xb6\xe9\xb9\x97\xdb\xa0\x47\xd5\x90\xa1\x43\x8b\x28\xba\x5d\x0c\x02\xe6\x72\x4d\xa4\x49\xe2\xe2\x70\x0b\x51\xa1\xd3\x23\xed\x03\x42\x2e\x89\xf6\xbb\x00\x52\xb6\x36\xf4\x7d\x88\x7b\x4a\xa8\x7d\x3f\xff\x09\x7c\x97\x1a\xdd\x24\xce\xb4\x43\x66\x1b\x7e\x15\x70\xf6\xf6\xf0\xec\xed\xdf\x78\xde\xea\xfc\xc5\x6f\x78\x98\x78\xfe\xcd\x31\x1f\xe7\x5e\xf1\x7f\xff\xfd\xd8\x7b\xf5\xeb\xfe\x9f\x5e\x7a\x47\x8f\xfb\xc7\xdf\x7a\x8f\x3f\xf6\x8e\xfe\xee\x7d\xfd\x62\xb8\xd0\x7b\xf4\x79\xff\xe5\xef\xf8\x88\x5f\x03\xce\x2a\x1e\x8b\xae\xf3\xf3\x32\x4b\x06\xf5\xb0\xa9\x1b\x04\x03\x02\xdb\xba\x09\xb7\x21\x01\x65\x90\x0f\x94\xc2\x0a\xb0\xf3\xb0\x58\x35\x55\xec\x92\x6a\xe2\x0b\x7b\xbf\x73\xb6\xe9\x94\x28\x92\x45\x70\x2f\xc5\xae\x07\x39\x0f\x11\x10\x53\x35\xc5\x34\x7f\x86\x6b\x4b\xe9\x48\x5f\xd8\x7b\x2b\xa6\xca\x33\x11\x22\xb1\xed\x69\x61\x09\x01\x54\x15\xb9\x56\x2a\x0f\x8f\x13\x7f\x15\xe9\x96\x42\xc2\x2e\x62\x0e\xd8\x7c\xf7\xf2\x82\xc5\x6a\x58\x66\x88\x1a\xd7\xbc\xfe\x72\x52\xce\x70\x61\x6f\x9d\xaf\x98\x77\x40\xb2\xe7\x16\x27\x6f\x6a\x55\x68\xb1\x68\x9c\x01\x93\xc6\x20\x25\x58\xd6\x78\x23\x5b\x99\x85\x73\x8f\xec\x82\xbe\x35\xb2\x15\xdb\x00\x84\x1e\x52\x70\x39\xf7\xce\xa7\xa9\x8e\xe3\x5e\x6d\x99\x50\xca\x81\x58\x19\x39\xda\xa9\xa4\x4f\xea\x0a\x49\xef\x09\xc9\x81\x46\xb4\xf9\x38\xb7\xbb\xb7\xcb\x88\x9c\x14\x84\xcc\x52\xee\x77\x91\x5d\x56\xbb\xb2\x8d\xae\x23\xa4\x39\xa5\xf0\xdf\x73\x0b\xc7\x6e\x36\xce\xc3\x9a\x41\x0b\x6b\x66\x30\xb0\xf9\xc5\xd4\x4f\x28\xe7\x06\x07\x43\xcd\x55\x8b\x46\xe0\xa3\x8f\xb7\xe7\xe3\x56\x46\x9c\xde\xa9\xa4\x30\x8b\xe0\x3d\x0b\x3d\x3b\xa8\x86\x4f\x7b\xdf\x92\x49\x96\x69\xa4\x57\x8a\x92\x39\x5a\x79\x13\xf2\xe9\x19\xba\x3a\xdd\xa7\xb4\x41\x4f\x29\x77\x40\x13\xf4\x26\x9c\x61\x22\x0b\xf6\x0a\x51\x9d\x25\x35\xa6\x1e\x4d\xc7\xc1\x2e\x94\xcd\x6d\x56\xee\x28\xb2\x54\xd9\x08\xe5\x74\xd9\x60\xa7\x1e\x1d\xda\xac\xd4\xb6\xa4\x8d\xe8\x68\xab\x53\xad\x4a\xad\x56\x74\xb8\x5a\xa9\x57\xa5\xad\xb1\xa9\xe1\xd1\xd9\x93\xf0\x6c\xa9\xd0\x82\x65\x6d\xbc\x43\x10\x86\x85\x93\x68\x2d\xba\x3a\x73\xf2\x8c\xb7\x5b\x7a\x2f\x4f\xfb\x9f\x9f\x9c\xfd\xe7\xab\xfe\xc3\x93\xc9\x38\x8e\x6c\x69\x59\x3f\x60\x06\xaa\x67\x86\x11\x61\x37\x62\xfb\x85\x19\x3b\x2d\xdc\xd7\x48\xf6\x57\x82\x1a\x8b\xf2\x5c\xb9\x9c\xeb\x88\x6d\xb3\xf0\x8c\x77\xf4\x98\xe7\x56\xdf\x1f\xbf\xf6\x4e\x8f\x87\x39\xd7\xc9\x9c\x13\x6e\xfc\x99\xaf\xfd\x5c\xa4\xdb\xcb\xaa\x36\x5b\xd1\x36\x90\xf9\x92\x6c\x1e\xe6\x6a\xa6\xf6\xf6\x22\x4a\xdf\x23\xb8\x2e\xd8\x61\x5c\x4e\x4f\x26\x17\x85\x8b\xbb\x13\x0d\x79\x43\x92\x15\x69\x73\x53\xaa\xb6\x6b\xb7\xa4\xa0\x53\xc0\xa7\xb6\x1a\xd5\x9b\x61\x1f\x82\x8f\xd7\xea\xb7\x2a\x5b\xb5\xf1\xa5\xe4\xe8\xe6\x93\x70\x49\xe8\x1d\x5f\xb0\x6a\x6b\xe9\xb2\x23\xe5\x97\x1c\x15\xcf\xac\x5c\x90\xf4\xbd\xc4\xd2\x65\xe3\x9a\xa0\x5b\xba\x8a\x36\xfc\x34\x6a\x3a\xf9\xa0\x4b\x91\x9d\xd9\xa7\x4b\x73\x4b\x35\x0d\x3a\x1d\x0a\x49\x76\x82\x9b\x2f\xc9\x72\x43\x8e\x0c\x28\xb2\xf4\xb3\x8e\xd4\x6a\x2b\x1b\x95\x76\x45\xd9\x6c\xc8\xdb\x95\x76\xb8\x5d\x44\x92\x95\x7a\xa3\xad\x48\xb7\x6b\xad\xf8\x4c\x6c\x74\x5b\x92\xab\x37\x2a\xf5\x76\xf2\x9a\xe1\x6c\x6c\xa6\x75\xa3\xd1\x4c\x5e\xc3\x66\xe2\xa3\x37\x3b\x29\xaf\xdf\xec\x24\x0f\x56\xb6\x1b\x9d\x01\x5c\xf5\x46\xe7\xfa\x8d\xe0\x0b\x6d\xb9\x52\x6f\x55\xaa\xed\x5a\xa3\x9e\x10\x36\x71\x45\x96\x78\x9c\xaf\xe3\x92\x87\x5b\xed\x4a\x5b\x52\x9a\x72\xe3\x46\xed\x83\x5a\xea\x7c\x82\x8a\x6d\x4a\x72\x85\xc1\xc2\xce\x64\x0a\x34\xbe\xba\x7d\x5b\xa9\x36\x36\x24\x45\xda\x6e\xb6\xef\xc4\xa7\x37\xa4\xad\xda\x2d\x49\xbe\x33\x0e\xee\xc1\x16\xa9\x94\x6c\xca\xb5\xaa\xa4\xdc\x92\xe4\xd6\x10\x9a\xe4\x9d\x58\x08\xd9\xd8\x6e\x6e\x49\xed\x24\xda\x49\xb7\x9b\x35\x39\xc1\xbc\x70\x0a\x0c\x8c\x49\x60\x3a\xc4\x96\xed\x46\x43\xd9\xee\x54\x6f\x8c\xb5\x36\x03\x86\x1f\x23\x50\xd1\x0a\xd3\x85\xf9\x24\x26\xc4\xea\x2e\x28\x56\xeb\x63\x5f\xa8\xc2\x03\x5b\xc7\x85\x8e\xb6\x10\xd1\x77\x7a\x8a\x8b\x27\x55\xa4\x13\x57\x97\xcc\x68\x15\xef\xba\x61\x16\x8e\xc5\x12\xb1\xd6\x9b\x0c\x9a\x74\x94\x0c\x28\x71\xe5\x33\xf0\x27\x8a\x66\x8e\x01\x86\xa0\x30\xf3\x01\x4d\xc3\xd0\x49\x8d\x01\x53\x9d\x90\x78\x04\xcc\x03\xdf\xc9\xf9\x92\xd8\xe5\x95\xb8\x85\x7c\x79\xbd\x0c\xbc\x91\xd6\x7c\x5d\x02\x46\x48\x23\x9e\xb9\xd7\x74\x47\xb1\x56\x60\x87\xe4\x5c\xc9\xf0\x5b\x08\xf6\x59\x76\xa1\xd8\x25\x54\x3a\x2d\x49\xf0\xe5\xf1\x58\xd9\xff\x9f\x7b\xcf\xdd\xa9\x58\xa5\x22\x5a\xfa\x7e\x51\x15\xbc\x0f\x0c\x77\x92\xdc\xa7\x05\xf2\x3d\x32\x11\xc3\xd0\x17\x18\x65\x64\x20\xb2\x41\x66\xfc\xc6\xa9\xb5\xe2\xee\xbb\x09\x1d\x07\x74\x0b\xe9\x4b\x6e\xb4\x66\x96\x33\x0b\xb2\x54\xb2\xe0\x86\xef\x69\x8d\xfe\x7b\xb0\xf6\xbf\x00\x00\x00\xff\xff\xbd\xcb\xa6\xc8\x35\x5a\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

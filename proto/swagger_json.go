package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x6f\x6f\xdb\xc6\x19\x7f\xef\x4f\x41\x70\x7b\x59\xc4\x59\x36\xec\x45\xde\xa9\x32\x13\x0b\xb1\x25\x83\x92\x8c\x1a\x43\x40\x9c\xc9\x93\x7c\xb5\xc8\x63\xee\x8e\x9e\x85\xc1\x80\xbb\xae\x43\xd6\x79\x8b\x81\xa6\x71\x9a\x1a\x0b\xba\xb5\x41\xb0\x61\xf5\x5e\x0c\x4d\xe0\x0e\xd8\x97\x31\xe5\xf8\xd5\xbe\xc2\xc0\x23\x25\x91\x47\x52\xe2\x1f\xab\x96\x37\x13\x08\x60\xdd\xf1\x9e\x7b\x9e\xe7\x9e\xdf\xf3\xef\x98\x5f\x2d\x48\x92\x4c\x7f\x09\xba\x5d\x48\xe4\xbb\x92\x7c\xe7\xd6\x6d\xf9\x3d\x6f\x0c\x59\x1d\x2c\xdf\x95\xbc\x79\x49\x92\x19\x62\x3d\xe8\xcd\xdb\x04\x33\xbc\x68\x22\x9d\x60\xcd\x04\xbd\x9e\x86\x89\x01\x89\xe6\x0f\xfb\x7f\x6f\x3a\x14\x59\x90\x52\xe1\xe7\x2d\xfe\x0e\x27\x2e\x49\xf2\x0e\x24\x14\x61\xcb\x23\x19\xfc\x29\x59\x98\x49\x14\x32\x79\x41\x92\xf6\x38\x0b\x3a\xb6\xa8\x63\x42\x2a\xdf\x95\x7e\xe1\xaf\x02\xb6\xdd\x43\x3a\x60\x08\x5b\x8b\x1f\x52\x6c\x79\xef\x3e\xe4\xef\xda\x04\x1b\x8e\x9e\xf1\x5d\xc0\xb6\xe8\x58\xb6\xc5\x9d\x9f\xf8\xac\x2e\xea\xd8\x80\xa3\x71\x49\x92\xbb\x90\x85\x7e\x7a\x8a\x72\x4c\x13\x90\xbe\xc7\xf5\xf9\xd3\x97\x83\xc7\x87\xee\xd3\x93\xb3\xb7\xfb\xef\xbe\xfd\xb3\xfb\x87\xcf\xcf\x4e\x7f\xef\x7e\xfa\x95\xfb\xe4\x4d\x20\x23\x5f\x81\x6d\x48\x38\x0f\x35\xc3\x5b\xd5\xf0\xf6\x79\x3f\xd0\x48\x13\x92\x1d\xa4\x43\xed\x3e\xb4\xf8\x78\x6b\xb7\xea\x31\x10\x5a\x4d\x20\xb5\xb1\x45\x21\x8d\xb0\x21\x49\xf2\x9d\xdb\xb7\x85\x21\x49\x92\x0d\x48\x75\x82\x6c\x16\xe8\xb5\x22\x51\x47\xd7\x21\xa5\x1d\xa7\x27\x0d\x29\xdd\x0a\x91\xf7\x45\xd2\xb7\xa0\x09\x62\xc4\x24\x49\xfe\x31\x81\x1d\x8f\xce\x8f\x16\x0d\xd8\x41\x16\xf2\xe8\x8a\x87\x1a\x65\x5d\x0d\x36\x91\x23\xa4\xf6\x42\xbf\xf6\xc2\xbb\xcb\x06\xec\x00\xa7\xc7\xa6\x4b\x62\x49\x8e\x05\x77\x6d\xa8\x33\x68\x48\x90\x10\x4c\x46\x02\x95\x95\x87\x38\x16\x43\x26\x54\x3c\xa2\x13\xf8\x5e\x48\x90\x40\xb6\x01\x01\x26\x64\x90\x8c\xcd\xce\x7f\x04\x71\x2c\x60\x72\xf0\x38\xc8\x10\xd9\x45\x5c\xc0\x47\x0e\x24\x7d\x71\x8a\xc0\x47\x0e\x22\xd0\xb3\x9b\x0e\xe8\x51\x28\x4c\xb3\xbe\xcd\x89\x52\x46\x90\xd5\x15\x17\x77\x30\x31\x81\xa7\x59\x19\x59\xec\xe7\x3f\x93\x13\x65\x79\x18\x92\x85\x81\xae\x28\x45\xa2\xb5\x8e\x29\x3d\x5c\x08\xd3\x0b\xf4\x22\xa0\x69\x11\xee\x22\xca\xb2\x62\x6a\xf0\x97\xfd\xc1\xcb\x6f\xdc\xaf\x9f\x5d\x7c\xfc\xda\xc7\x94\xfb\xe4\xcd\xe0\xf9\x89\x7b\xf8\xca\xfd\xfb\x73\xf7\xf8\x75\x5e\x64\x55\xb7\xa0\xbe\xcd\x67\x14\xce\xc7\x75\x82\x96\xc0\xfb\x0d\xb6\x82\x67\xbe\xb1\xf5\xde\x74\x4e\xfd\x63\x66\xbb\x9a\x1e\xf5\xf6\x97\xcb\xf3\x55\x00\x9e\x40\xc0\x22\x01\xd4\xc6\x34\x1d\xed\xee\xe3\x2f\xdd\xef\x4f\x7d\x9c\xe7\x06\x36\xdf\x8a\x4f\x5d\x2f\x50\x8f\xf9\xbe\x01\x74\xf0\xa4\xc0\x64\x13\x1b\x31\x08\xf8\xe8\x48\x9a\x09\x81\x83\x11\x47\xc4\xc6\x25\x1e\xda\x23\x07\x52\x96\x45\xf6\xd9\x62\xcd\x80\x0c\xa0\x5e\xd6\xc0\xfa\xee\x8f\x6f\xdc\x27\xcf\x7c\xa8\xbd\x3b\x79\x35\xf8\xf8\x93\xfc\x39\x2a\xe3\xe3\x4b\xfe\xbe\xd7\x09\x73\x51\xd6\x6f\x60\x17\x3c\x29\xb0\xfb\x1f\x8c\x4b\x16\x66\xde\xfb\x59\xe3\x92\x0f\x93\xc1\xd3\x93\xb3\xef\x9f\x5f\xec\xbf\x38\x7f\xf9\x4d\x5e\xb0\xf8\x25\x11\x01\x06\xac\xfb\x5b\x5f\x27\xb8\x88\xcc\xdf\x00\x26\x78\xe6\x3e\x4e\xc5\x4f\x6e\x4e\x82\x15\xdd\x76\x8a\x44\x2a\xf7\xf3\xdf\xba\x9f\x7d\x54\x34\x52\x35\xb7\x9d\x6b\x85\xbb\x10\xdf\x37\x90\x0b\x9e\xff\x9f\x18\x45\x59\x9e\xd2\x69\xf0\xe5\x3f\x07\xcf\xfe\xe1\xa3\xe4\xfc\xd3\xef\x06\xfb\xb9\x51\xd2\xb6\x8d\x61\x4e\xdb\xe4\x5b\x5f\x27\xa8\x88\xcc\xdf\xe0\x25\x78\xe6\x3e\x44\xc5\x4f\xee\x6a\x42\xd4\xe8\x8e\x21\xc4\xea\xf8\x46\x20\x5b\x23\x2e\x04\xd6\xa1\xff\xc0\x9b\x1f\x42\x7d\xdc\x66\x94\x6d\xe2\x61\x91\x21\x01\x4a\xb2\x8e\x4d\x93\x9b\x58\x04\x5e\x99\x6a\x51\xbe\x32\x6e\xf0\x61\xf3\x40\x54\x13\xdb\xae\x11\x2e\x37\x31\xee\x41\x60\x45\xce\x3d\xd4\xd4\x1a\x4e\x2f\x88\x67\x10\xf5\x5d\x22\x5f\xc8\x6a\xf9\xf4\x63\x5a\x11\xba\x68\x32\xb4\x1c\x33\x72\x7a\x72\xb5\xbe\x11\x76\x40\xed\xe6\xd2\x70\xf7\xd1\xa9\x87\x40\xcb\x5f\x9f\xc8\x4b\x44\x47\xa5\xce\x29\x72\x21\x94\xf9\x94\x54\xc8\xf8\x55\x4e\xe2\xf1\x98\xb4\x9b\x76\x32\x62\xfc\xc9\xa4\xf9\x78\x77\xa2\x84\xc4\x0e\x32\xa6\x30\x97\x62\x35\x42\x2b\x34\x2c\xb0\xe7\xe7\x32\x4b\x1c\x5a\x17\xf5\xc6\xb9\x97\xdb\xa0\x0f\x89\xa6\xf7\x10\xb4\x98\x86\xec\x62\x1c\xf0\x60\x39\x55\x27\x89\x8b\xa3\x7d\xde\x42\xbb\x0b\x3d\x1e\x29\x57\x25\x10\xb4\x6a\x52\x48\xf7\xd0\x0e\x24\x7d\x2d\x72\xcd\x9b\x7f\x07\x9f\x4a\xcd\x23\x12\x37\xda\x91\xb1\x8d\x6e\x8f\xcf\xde\xee\x9f\xbd\xfd\xab\x7b\x7a\x74\xf1\xd9\xe9\xf9\x8b\xdf\xf8\x09\xfe\xf9\xb7\x47\xfe\xb8\x9f\xcf\xfc\xe7\x5f\x07\xee\xab\x5f\x0f\xfe\x74\xec\x1e\x1e\x0c\x8e\xbe\x73\x0f\x3e\x71\x0f\xff\xe6\x7e\xfd\x62\xb4\xd0\x7d\xfc\xc5\xe0\xf8\x77\xfe\x48\xd0\x3d\xce\x0a\x8f\x79\xf7\xdc\x79\x8d\x25\x83\x7b\x48\xb9\xa1\x9d\x5b\x15\x14\x43\x4d\x26\x45\x24\xb6\x01\xe7\x56\x11\x40\xd7\xb1\x63\xa5\x06\xf1\x49\x8e\x43\xc7\xc8\xd2\x58\x34\x1a\xe7\xe0\x2d\x88\xe4\x89\xa4\x7b\x13\xf2\x0a\x40\x08\x88\x66\x93\x32\x62\xd0\x14\xcb\x88\x8c\x7c\x34\xb7\xb0\x9d\xe8\xc7\x22\x59\x71\x8e\x83\x0f\x17\xd6\x73\x7b\xea\xfe\x8a\x1f\x4e\xcb\xa3\x56\x49\x61\xf5\x36\x86\xd5\xe6\x2a\x64\xa0\x8c\x62\xb1\xad\xcd\x22\xfb\xc0\x76\xc1\xe0\x8f\x6d\xcd\xee\x01\xe6\x6d\x52\x70\xb9\x9f\x3e\x5c\xa6\x13\x8b\x87\xdd\x32\xb9\x1e\x85\x44\x1b\x67\x02\xa9\xaa\x47\x16\x83\xdd\xc8\x45\xab\xa8\xfb\x9f\xde\x29\x24\x86\x78\x85\x95\x57\x00\xba\xc5\x95\x9c\x94\x25\xcd\x12\x2d\x5b\xd8\x2e\xeb\x93\x38\xa1\xfb\x18\x1b\xb4\x94\xfc\xdb\x4e\xe1\xe4\xd2\x26\x79\x4c\x33\x1c\x97\xcc\x0c\x61\x29\x3f\x4c\x83\x5e\x45\x6e\x76\x08\x34\x1c\xbd\x68\x89\x30\xfe\x0a\xf1\x12\x84\xc9\x7a\xec\x6b\xa0\xcf\x7b\x1f\xc5\xcb\xe5\xb5\xca\x86\xa6\x2a\x95\xa5\x48\xd1\xcc\x07\xdb\x75\x71\xa8\xd9\xae\x56\x95\x66\x53\x1c\xbe\x57\xa9\xad\x28\x93\xab\xec\xf1\x2e\xd3\x24\x6a\xea\xd0\x82\x65\xbd\x11\x65\x98\xc0\xc2\xf5\x48\xd3\x5b\x9d\xb9\x0e\xf1\x2f\xf7\xdc\xe3\xd3\xc1\x17\x27\x67\xff\xfe\x6a\xf0\xd1\xc9\x74\x19\xc7\xa8\x2f\xeb\xb1\x66\x10\xe4\x66\x98\xf1\x75\x05\x2f\x25\xcd\xd8\xbd\xfa\x5e\x31\xd9\xb3\x86\xd8\xa2\x9e\xcd\x95\x2b\x5f\xc7\x66\x9b\xc5\x66\xdc\xc3\x03\xbf\x4c\xbd\x38\x7a\xed\x9e\x1e\x8d\xca\xd7\xe9\x96\x13\xbd\xfd\xca\x9d\x16\x71\x8a\x45\xdd\xfc\x3c\x9d\x5e\x56\x07\xc9\xbd\xa3\x62\x31\x7e\xd7\x71\x45\x7a\x13\xef\x63\x72\x5a\xd6\xc8\xbf\x27\xc7\x5e\xd0\xd7\xca\x6d\x10\x89\x21\x05\x35\x5c\x3c\xfe\x34\xd4\x25\x45\xd5\x94\x7b\xf7\x94\x6a\xab\xb6\xae\x84\x63\x8b\x3f\x55\xab\xaf\x57\x56\x6a\x4b\xf1\x89\x95\x46\xf5\xc1\x94\xb0\x23\x12\x9f\x26\x4b\xc2\x85\xf7\x9c\xf5\x3f\x4b\x37\x02\x3d\x7b\xc9\xd1\x83\xcc\x6a\x05\x49\x1f\x79\xcc\x57\x61\x9c\x41\x92\x61\xab\xbd\x90\x21\x27\x24\x47\x8a\xaa\x36\xd4\xe8\x65\x84\xa2\x6a\xf5\x46\x4b\x53\x3e\xa8\x35\x5b\xb1\x99\xd8\xe8\xaa\xa2\x56\x97\x2b\xf5\x56\xf2\x9a\xd1\x6c\x6c\xa6\xb9\xdc\x58\x4b\x5e\xc3\x67\xe2\xa3\x0f\xda\x29\xaf\x3f\x68\x27\x0f\x56\x56\x1b\xed\x21\x5f\xf5\x46\xfb\xfe\x72\xf8\x85\x96\x5a\xa9\x37\x2b\xd5\x56\xad\x51\x1f\x26\x87\x31\xf4\x26\x6e\x17\xe0\x35\x79\xb8\xd9\xaa\xb4\x14\x6d\x4d\x6d\x2c\xd7\xde\xaf\xa5\xce\x07\x5e\x21\x3c\xbb\xa6\xa8\x15\xce\x0b\xdf\x93\x3b\x83\xf8\xea\xd6\x07\x5a\xb5\xb1\xa4\x68\xca\xea\x5a\x6b\x23\x3e\xbd\xa4\xac\xd4\xd6\x15\x75\x63\x12\xdf\x43\x12\xa9\x9a\x5c\x53\x6b\x55\x45\x5b\x57\xd4\xe6\x88\x1b\xfe\xda\x24\x17\x36\x34\xab\x09\x66\x2b\x76\xb7\xae\x2c\xd0\x99\x90\xe8\x5b\xa0\x58\x9f\x91\x21\x13\x6a\x70\xd7\x46\xa4\xd0\xd6\x16\x66\xa8\xd3\xd7\x1c\x92\x5a\xbd\xcf\xf0\x76\xa8\xf8\xe5\x0a\x77\x9b\x3c\xcf\x89\xdd\xb0\x64\xf0\x57\xe3\x42\xa5\xc4\x91\xcf\x20\x48\x15\xad\xbf\x01\x81\xa0\xb0\xf1\x01\xc3\x20\x90\xa6\xe6\xa7\xa9\x91\x2d\x9e\x9d\xfb\x49\xf9\xf4\x5a\x2e\x76\x78\x25\x4e\xc1\xc4\x16\xec\x5f\x66\x54\x4e\xfb\x3a\xa2\x04\x8f\xd0\x4b\xa3\x7f\xf0\x7e\xf2\x38\x81\x0f\x51\x48\xae\xe3\x46\x1f\x2b\x69\x66\xb4\x7f\x9c\x7d\xcb\x48\x03\xba\xa4\xc2\xaf\x4f\x1a\xc4\xff\x3b\xed\xa6\xd3\xa9\x58\xa5\xca\x24\xef\xfd\xa2\x2e\x78\x07\xf4\x9c\x69\xb8\x4f\xf1\x44\x9b\x7d\x36\x55\xc2\xc8\x27\x52\x65\x30\x20\x10\xc8\x2c\xdf\x24\xb7\x96\xb3\x29\x1e\x89\xb8\x94\x82\x6e\x89\x2f\x02\x66\x56\xcf\x87\x4d\x2a\x19\xb8\xd1\x73\x5a\xf0\xfe\xed\x2d\xfc\x37\x00\x00\xff\xff\x48\x9f\xc8\x09\x44\x3e\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{}},
			}},
		}},
	}},
}}

package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6e\xdb\xc8\x15\xbe\xf7\x53\x10\x6c\x2f\x83\x38\x4d\x8b\x5e\xe4\x4e\x2b\xd3\x89\x10\x5b\x52\x29\x29\x48\x50\x04\xc4\x98\x1c\xcb\xdc\x90\x1c\x66\x38\x74\xad\x16\x01\x9c\x6e\xb7\x48\xb7\x69\x63\x60\xb3\x71\x36\x1b\x74\xb1\xed\x36\x08\x5a\x74\xdd\x8b\x62\x13\x78\x0b\xf4\x65\x4c\x39\xb9\xea\x2b\x14\x33\x23\x4a\xfc\x95\xf8\x23\xc9\xd2\x56\x04\x02\x58\x33\x9c\x99\x33\x67\xce\x77\x7e\x87\xf9\xd5\x9a\x20\x88\xce\x2f\x40\xb7\x0b\xb1\x78\x4d\x10\xaf\x5e\xbe\x22\x5e\xa2\x6d\xba\xb5\x8b\xc4\x6b\x02\xed\x17\x04\x91\xe8\xc4\x80\xb4\xdf\xc6\x88\xa0\x75\x53\x57\x31\x52\x4c\x60\x18\x0a\xc2\x1a\xc4\x0a\x6f\xe6\x7f\xef\xb8\x8e\x6e\x41\xc7\x89\xfc\xbc\xcc\xde\x61\x93\x0b\x82\xb8\x0f\xb1\xa3\x23\x8b\x4e\x39\xf8\x53\xb0\x10\x11\x1c\x48\xc4\x35\x41\x78\xc0\x48\x50\x91\xe5\xb8\x26\x74\xc4\x6b\xc2\xcf\xf9\x28\x60\xdb\x86\xae\x02\xa2\x23\x6b\xfd\x43\x07\x59\xf4\xdd\xbb\xec\x5d\x1b\x23\xcd\x55\x33\xbe\x0b\xc8\x9e\x33\xda\xdb\xfa\xfe\x8f\x38\xa9\xeb\xea\x1e\x54\xef\x0d\x3b\xe8\x9b\xc8\x21\x81\xdf\x94\x55\xae\x69\x02\xdc\xa3\x74\xbf\xfb\xe6\xcf\xde\x1f\x3e\x3b\xff\xe4\xdb\xfe\xe1\xc3\xfe\x5f\x0e\xfb\x5f\xfe\x75\xb0\x39\xf6\x22\xb2\x21\x66\x8b\xd7\x34\xfa\x72\x83\x2e\xf0\xc1\x80\x15\x2d\x88\xf7\x75\x15\x2a\x55\xba\x1e\xeb\x69\x11\x40\x60\x70\x38\x86\x8e\x8d\x2c\x07\x3a\xa1\xe5\x05\x41\xbc\x7a\xe5\x4a\xa4\x49\x10\x44\x0d\x3a\x2a\xd6\x6d\x32\xe0\x68\x45\x70\x5c\x55\x85\x8e\xb3\xeb\x1a\x82\x3f\xd3\xe5\xc0\xf4\x7c\x2b\xea\x1e\x34\x41\x6c\x32\x41\x10\x7f\x88\xe1\x2e\x9d\xe7\x07\xeb\x1a\xdc\xd5\x2d\x9d\xce\x1b\x3d\xce\x08\xed\xf2\x60\x15\x31\x34\xd7\x83\xc0\xaf\x07\xc1\xe5\x45\x0d\xee\x02\xd7\x20\x93\xb7\x62\x09\xae\x05\x0f\x6c\xa8\x12\xa8\x09\x10\x63\x84\xa7\xb7\x23\xec\x5a\x44\x37\xa1\x44\x67\x1d\x43\xf8\x5a\xc2\x16\x44\x1b\x60\x60\x42\x02\xf1\x48\xe4\xf8\x13\xd9\x8f\x05\x4c\x06\x9c\x1d\xa4\xf5\xa2\xf4\xea\x56\x5a\x0f\x86\xf7\x5d\x1d\x43\x2a\x3a\x04\xbb\x70\xb6\x27\x77\xdf\x85\x0e\xc9\xb2\xff\xbb\x81\xfd\x13\xd0\x8d\xee\x3c\x51\xc8\x47\xf3\xde\x5d\x0b\xce\x37\xe0\x65\x10\x7d\x48\x83\x41\xf0\x75\x61\x3a\xf6\xce\x9f\x7e\xd9\x7f\x74\xe4\x3d\x3d\x39\x7b\x7b\xc8\x71\x78\x76\xfa\x7b\xef\x93\xaf\xbc\x27\x6f\xf2\x82\xf0\x3a\xb4\x58\x7b\xfb\xa0\x4a\x09\x58\x26\x0c\x86\x49\x5f\x41\xd0\x7f\x52\x20\xe8\xea\x5a\x32\x02\xef\xbb\x10\x8f\x83\xe0\x2e\x30\x9c\x28\x06\x49\xcf\x66\x93\x3a\x04\xeb\x56\x37\x3a\x78\x17\x61\x13\x50\xd6\x8a\xba\x45\x7e\xfa\x13\xf1\x82\xe0\xb4\x0e\x0f\xf4\x90\x05\x1b\x0b\x2a\x6e\xc4\xbc\xaf\x9f\xbd\xff\xe8\x35\x07\x95\xf7\xe4\x4d\xff\xf9\x89\x77\xf4\xca\xfb\xc7\x73\xef\xe5\xeb\xe2\xf6\x4d\x62\x74\x2c\x13\xb6\x22\xb4\xaf\xc0\xe5\x3f\x8b\x0d\xae\x4b\x93\x29\xe5\xe7\x4c\x0e\x14\x35\xac\xef\xa7\x4b\xf3\x45\x20\x1e\x43\xea\x45\x66\xf5\x5f\xbd\x47\x5f\x78\xdf\x9d\x72\xa0\xe7\x46\x36\x5b\x8a\x75\x2d\x17\xaa\x47\x74\xaf\x10\xed\x3f\x8b\xef\xb1\x06\x4f\x6d\x41\xbc\x55\x0d\x12\xa0\x1b\x59\x4d\xeb\xbb\x3f\xbe\xf1\x9e\x3c\xe3\x58\x7b\x77\xf2\xaa\xff\xd1\xc7\xf9\xdd\x54\xc2\xda\x37\xf8\xba\xcb\x04\xba\x30\xe9\x2b\xdc\xf9\x4f\x0a\xee\xbe\x87\x96\xc9\xc8\xe1\x85\x06\xa1\x92\x17\x24\x9b\xba\xa5\xb1\x8e\xad\x65\x73\x37\x43\x94\xaf\x20\xe2\x3f\x29\x10\x71\xf6\x90\xad\xe8\x9a\x62\x84\x8f\x59\x98\x0e\x4e\x00\xc6\x20\x6e\xf9\x08\x34\xa3\xd2\x23\x4c\xf4\x55\xc7\x7b\xab\x91\x73\x64\x29\x4f\xc3\x80\x2a\x65\xe8\xe6\x70\x98\xe9\x1a\x44\xcf\xeb\xe4\xba\x2b\xee\x8c\xe1\x0e\x15\x54\xc5\x84\x04\x5c\x76\x08\xc0\x44\xa1\xbf\xe7\xa2\x6f\x73\xd1\x06\x2d\x6d\xa1\x28\xb3\x41\x77\x40\x19\xfb\xcb\x72\xcd\xe9\x53\xa6\x5b\x04\x76\x43\x41\x85\x10\x13\x93\x1f\x5f\x2d\x49\xb9\xa3\xff\x72\x06\x4c\x2d\x40\xfa\x9c\xcc\xaf\x85\x08\x7d\x3f\x5f\x61\xa3\xff\xf4\xe4\xec\xbb\xe7\xef\x0f\x5f\x9c\xe7\x2f\x6c\xf0\xac\x24\x06\x1a\xac\xf3\xa5\x97\xc9\x14\x47\x89\x5f\x59\x63\xff\x59\xf8\x40\x31\x7e\x74\x0b\x12\x2d\x52\x87\x65\x5d\xb7\x1c\x7a\xd8\x59\x1d\x61\xef\xf4\xf8\xfd\xa7\x83\xfc\x0c\xcf\xbf\x16\xab\x32\xd6\xf8\xb2\xad\x3d\x64\x2f\x5f\xc2\x26\x4a\xfc\x0a\x8c\xfe\xb3\xf4\x79\xd8\x81\x13\xbf\x24\xd4\x72\xb1\xfc\xbe\x05\xe6\xce\x3d\xb7\x48\x5c\xee\x7d\xf6\x5b\xef\xd3\x87\x45\x53\x58\xad\x7b\xee\x52\xe9\xa0\x00\xdd\x2b\xf5\xe3\x3f\xff\x3f\xc9\x2b\x87\xe4\xa9\xaa\xf4\xbf\xf8\x57\xff\xd9\x3f\x83\x77\x83\xf2\xc2\xa4\x63\x6b\x7e\xb6\x7b\xf9\xae\x05\x45\x89\x5f\x01\xc6\x7f\x16\xde\x79\x8e\x1f\xdd\xc5\x38\xcf\xc3\xfb\x7f\x01\x52\x47\xb7\xf5\xb2\x55\xe9\x03\x68\xf5\x15\x08\xda\xf9\x90\x3a\xdf\x97\x86\x28\xc6\x14\x8c\x44\x8f\x60\x49\x54\x91\x69\x32\x19\x0b\xe1\x2b\x53\x99\x8a\x8d\x8c\x4b\x7c\x50\x3c\x74\x47\x89\xde\xc9\x08\x51\xb9\x83\x90\x01\x81\x15\x18\x9c\xa8\x9d\x32\xdd\xe8\x2a\xc1\x84\x91\xb7\x13\xd3\x34\xe9\x79\xc0\x94\x2c\x60\x26\x15\x5e\x68\x9b\x8b\x7e\xd8\xc6\x98\x83\xce\xce\xbe\xcc\x81\x2f\xb7\x16\xc5\xd9\x8b\x74\xab\xcd\xa9\x8b\xf1\x33\xe2\x52\x8b\xd0\x72\xcd\x10\xc8\xc5\x6a\xfd\x4e\xd0\x50\x75\x5a\x1b\x3e\x25\x43\xe5\x10\x50\xee\xec\xf5\xb1\xb4\x84\xb8\x5b\xea\x84\x43\xb7\x0a\x33\x73\x54\x86\x84\xdd\x07\x4c\x3c\x58\xd3\xe9\xa6\x9d\x6b\x54\xc8\x33\x71\x3e\x5e\xdf\x2e\xb1\x63\x1a\x01\x8e\x27\x2e\x24\x75\xa9\x71\x51\x70\xc3\x2c\x0d\x9d\x75\xc7\x81\x71\x61\xab\x9d\x7b\xb8\x0d\x7a\x54\x0d\x19\x3a\xb4\x88\xa2\xdb\xc5\x28\x60\x4e\xd5\x44\x9e\x24\x0e\x0e\x5f\x15\x2a\xb4\x7a\xe4\x96\x80\x90\x0b\xd1\x83\x62\x7f\xca\xd4\x86\xbe\x0f\x71\x4f\x09\xdd\xd4\xcf\xbf\x02\x9f\xa5\x46\x27\x89\x0b\xed\x50\xd8\x86\x1f\x00\x9c\xbd\x3d\x3c\x7b\xfb\x37\x9e\x9b\x3a\x7f\xf1\x1b\x1e\x09\x9e\x7f\x73\xcc\xdb\xb9\xdf\xfb\xdf\x7f\x3f\xf6\x5e\xfd\xba\xff\xa7\x97\xde\xd1\xe3\xfe\xf1\xb7\xde\xe3\x8f\xbd\xa3\xbf\x7b\x5f\xbf\x18\x0e\xf4\x1e\x7d\xde\x7f\xf9\x3b\xde\x32\xa8\xf4\x66\x85\xc7\xa2\xeb\xfc\xbc\xc2\x92\x41\x3d\x6c\xea\x06\xc1\x80\xc0\xb6\x6e\xc2\x6d\x48\x40\x99\xcd\x07\xea\x5d\x05\xc4\x79\x58\x91\x9a\xea\xee\x92\x2a\xdf\x0b\x7b\xbe\x73\xb6\xe9\x94\x29\x92\x45\x70\x2f\xc5\xae\x07\x25\x0f\x11\x10\x53\x35\xc5\x34\x7f\x86\x63\x4b\xb9\x7b\xbe\xb0\xe7\x56\x4c\x95\x67\x62\x44\xe2\xed\xa6\x85\x65\x04\x50\x55\xe4\x5a\xa9\x32\x3c\x0e\xfe\x2a\xd2\x2d\x85\x84\x5d\xc4\x1c\xb4\x0d\xdc\xcb\x0b\x86\xd5\xb0\x94\x10\x35\xae\x79\xfd\xe5\xa4\xb4\xe0\xc2\x9e\x3a\x1f\x31\xef\x80\xe4\x9e\x5b\x9c\xbd\xa9\x95\x9f\xc5\xe2\x71\x86\x9d\x34\xfc\xa4\x5f\x59\xe3\x8d\x6c\x65\x16\xce\x3d\xb2\x0b\xfa\xd6\xc8\x56\x6c\x03\x10\xba\x48\xc1\xe1\xdc\x3b\x9f\xa6\x3a\x8e\x7b\xb5\x65\x42\x29\x07\x62\x65\xe4\x68\xa7\xb2\x3e\xe9\xea\x47\xfa\xc5\x8f\x1c\xdb\x88\xde\x31\xce\xed\xee\xed\x31\x26\x27\x05\x21\xb3\xc4\xfd\x1e\xb2\xcb\x6a\x57\x36\xd1\x75\x84\x34\xa7\xd4\xfe\xef\xb9\x85\x63\x37\x1b\xe7\x11\xcd\xa0\x85\x35\x33\x18\xd8\xfc\x30\x1d\x64\x8c\x73\x93\x83\xa1\xe6\xaa\x45\x23\xf0\xd1\x77\xda\xf3\x71\x2b\x23\x4e\xef\x54\x52\x98\x45\xf6\x3d\x0b\x3d\xeb\x17\xbc\xa7\x3d\x6f\xc9\x24\xcb\x34\xd2\x2b\x45\xd9\x1c\xad\xad\x09\xf9\xf4\x0c\x1d\x9d\xee\x53\xda\xa0\xa7\x94\x5b\xa0\x09\x7a\x13\xd6\x30\x91\x05\x7b\x85\xb8\xce\x92\x1a\x53\x8f\xa6\xe3\x64\x17\xca\xe6\x36\x2b\x77\x14\x59\xaa\x6c\x84\x72\xba\xac\xb1\x53\x8f\x36\x6d\x56\x6a\x5b\xd2\x46\xb4\xb5\xd5\xa9\x56\xa5\x56\x2b\xda\x5c\xad\xd4\xab\xd2\xd6\xd8\xd4\xf0\x68\xed\x49\xfb\x6c\xa9\xd0\x82\x65\x6d\xbc\x43\x10\x86\x85\x93\x68\x2d\x3a\x3a\x73\xf2\x8c\xdf\xa9\xf4\x5e\x9e\xf6\x3f\x3f\x39\xfb\xcf\x57\xfd\x87\x27\x93\xf7\x38\xb2\xa5\x65\xfd\x80\x19\xa8\x9e\x19\x46\x84\xdd\x88\xed\x17\x66\xec\xb4\x70\x5f\x23\xd9\x5f\x09\x6a\x2c\x2a\x73\xe5\x72\xae\x23\xb1\xcd\x22\x33\xde\xd1\x63\x9e\x5b\x7d\x7f\xfc\xda\x3b\x3d\x1e\xe6\x5c\x27\x4b\x4e\xf8\x6e\xcf\x7c\xed\xe7\x22\x9d\x5e\x56\xb5\xd9\x8a\x5e\xf4\x98\x2f\xcb\xe6\x61\xae\x66\x6a\x6f\x67\x52\xdb\x1e\x2d\x7c\xc1\x1e\xe1\x72\xba\x2a\xb9\x38\x5c\xdc\x5f\x68\xc8\x1b\x92\xac\x48\x9b\x9b\x52\xb5\x5d\xbb\x25\x05\xad\x3e\xef\xda\x6a\x54\x6f\x86\x9d\x04\xde\x5e\xab\xdf\xaa\x6c\xd5\xc6\xd7\x8a\xa3\x93\x4f\xda\x4b\xc2\x05\xf0\x05\x2b\xa7\x96\xae\x2b\x52\x79\xc9\x51\xd2\xcc\x2a\x05\x49\x5f\x3d\x2c\x5d\xba\xad\x09\xba\xa5\xcb\x64\xc3\x0f\x9c\xa6\x93\xf0\xb9\x14\x99\x99\x7d\x80\x34\xb7\x5c\x92\x7f\x95\xa1\x10\xb2\x13\xfc\x78\x49\x96\x1b\x72\xa4\x41\x91\xa5\x9f\x75\xa4\x56\x5b\xd9\xa8\xb4\x2b\xca\x66\x43\xde\xae\xb4\xc3\xf7\x41\x24\x59\xa9\x37\xda\x8a\x74\xbb\xd6\x8a\xf7\xc4\x5a\xb7\x25\xb9\x7a\xa3\x52\x6f\x27\x8f\x19\xf6\xc6\x7a\x5a\x37\x1a\xcd\xe4\x31\xac\x27\xde\x7a\xb3\x93\xf2\xfa\xcd\x4e\x72\x63\x65\xbb\xd1\xf1\xe9\xaa\x37\x3a\xd7\x6f\x04\x5f\x68\xcb\x95\x7a\xab\x52\x6d\xd7\x1a\xf5\x84\xb8\x88\x2b\xb2\xc4\xe5\x06\x3a\x2e\xb9\xb9\xd5\xae\xb4\x25\xa5\x29\x37\x6e\xd4\x3e\xa8\xa5\xf6\x27\xa8\xd8\xa6\x24\x57\x18\x2d\x6c\x4d\xa6\x40\xe3\xa3\xdb\xb7\x95\x6a\x63\x43\x52\xa4\xed\x66\xfb\x4e\xbc\x7b\x43\xda\xaa\xdd\x92\xe4\x3b\xe3\xe8\xf6\xa7\x48\xe5\x64\x53\xae\x55\x25\xe5\x96\x24\xb7\x86\xd4\x24\xcf\xc4\x62\xc4\xc6\x76\x73\x4b\x6a\x27\xf1\x4e\xba\xdd\xac\xc9\x09\xe6\x85\x73\xc0\x37\x26\x81\xee\x90\x58\xb6\x1b\x0d\x65\xbb\x53\xbd\x11\x13\x3f\x3e\x9c\x92\x75\x4b\x92\x6b\x9b\x77\xc6\x9a\x23\x1f\x11\x63\x10\x17\xad\x31\x5d\x98\xd3\x62\x42\xac\xee\x81\x62\xd5\x3e\xf6\x21\x2a\x3c\xb0\x75\x5c\x68\x69\x0b\x11\x7d\xb7\xa7\xb8\x78\x52\x4d\x3a\x71\x74\xc9\x9c\x56\xf1\x7b\x37\xcc\x04\xb2\x68\x22\x76\xf9\x26\x83\xaa\x1d\xa5\x03\x4a\x1c\xf9\x0c\x1c\x8e\xa2\xb9\x63\x80\x21\x28\x2c\x7c\x40\xd3\x30\x74\x52\xa3\xc0\x54\x2f\x25\x1e\x03\xf3\xd0\x77\x72\xc6\x24\x76\x78\x25\x4e\x21\x5f\x66\x2f\x83\x6c\xa4\xdd\xaf\x2e\x41\x23\xa4\x21\xd1\xdc\xab\xba\xa3\x60\x2c\x30\x43\x72\xb6\x64\xf8\xbd\x03\xfb\xfa\xba\x50\x70\x13\x2a\x9e\x96\x64\xf8\xf2\xb8\xb4\xec\x3f\xcb\xdd\x71\x77\x2b\x56\xa9\x90\x97\xbe\x5f\x54\x05\xef\x03\xc3\x9d\x84\xfb\x14\x4d\xb4\xd3\x23\x13\x77\x18\xfa\xc8\xa2\x0c\x06\x22\x13\x64\xde\xdf\x38\xb5\x56\xdc\xbf\x37\xa1\xe3\x80\x6e\x21\x7d\xc9\x8d\xd6\xcc\xb2\x66\x41\x91\x4a\x06\x6e\xf8\x9c\xd6\xe8\xbf\x07\x6b\xff\x0b\x00\x00\xff\xff\x58\x22\x2a\xa4\x22\x5a\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}

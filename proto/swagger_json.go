package proto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _proto_micro_mall_order_proto_order_business_order_business_swagger_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\xe1\x8b\xdc\x44\x14\xff\xbe\x7f\xc5\x30\xfa\x51\xba\x67\x11\x3f\xdc\xb7\xba\x5d\xec\x51\xbc\x93\xcd\x1d\x58\xe4\x08\x73\xc9\xdb\xbd\xa9\xc9\x4c\x3a\x33\x39\x5d\x64\xc1\x8a\x4a\x85\x13\x0e\x6a\x59\x5b\x0f\x41\x11\x11\x85\xde\x37\x29\x5b\xc1\x7f\xe6\xb2\xb5\x9f\xfc\x17\x64\x92\x5c\x76\x32\xc9\x5e\x73\xd9\xee\x7e\xda\xcc\xcc\x7b\x79\xbf\xf7\x7e\xbf\xf7\x26\x9f\x77\x10\xc2\xf2\x53\x32\x1a\x81\xc0\x9b\x08\x5f\xbf\xb6\x81\xdf\xd2\x6b\x94\x0d\x39\xde\x44\x7a\x1f\x21\xac\xa8\x0a\x40\xef\x47\x82\x2b\xde\x0d\xa9\x27\xb8\x1b\x92\x20\x70\xb9\xf0\x41\xb8\xd9\x72\xf6\xff\x20\x96\x94\x81\x94\xd6\xe3\xb5\xf4\x4c\xea\x1c\x21\x7c\x04\x42\x52\xce\xb4\xcb\xfc\x2f\x62\x5c\x21\x09\x0a\x77\x10\x9a\xa4\x21\x78\x9c\xc9\x38\x04\x89\x37\xd1\xc7\x99\x15\x89\xa2\x80\x7a\x44\x51\xce\xba\x77\x25\x67\xfa\xec\x7e\x7a\x36\x12\xdc\x8f\xbd\x86\x67\x89\x3a\x94\x0b\x6c\xdd\xa3\xb7\xb3\x50\xbb\x9e\x00\xa2\xa0\xd8\xd1\x47\xb9\x54\xc6\xb3\xce\x55\x1c\x86\x44\x8c\x75\xe0\xc9\x83\x1f\x93\xe7\xb3\x7f\x9f\xfe\x92\x7c\xf7\x28\xc7\x95\x1e\xe1\x11\x88\xf4\xbd\x5b\xbe\x3e\xd6\x4b\xbd\xee\xe8\x37\x98\xa7\x04\xc8\x88\x33\x09\xb2\xe4\x1f\x21\x7c\x7d\x63\xc3\x5a\x42\x08\xfb\x20\x3d\x41\x23\x95\xe7\xec\x06\x92\xb1\xe7\x81\x94\xc3\x38\x40\x17\x9e\xae\x19\xee\xb3\x58\xbd\x43\x08\x49\xc5\x19\x42\xf8\x4d\x01\x43\xed\xe7\x8d\xae\x0f\x43\xca\xa8\xf6\x6b\x17\xcc\x88\x7b\x90\xbf\x01\x97\xfc\x4c\x3a\x75\xff\x27\x06\xc6\x88\x08\x12\x82\x02\xb1\xa8\x4b\xf6\xb3\xd0\x31\x12\xa6\xec\x3a\xe0\xfe\xd8\x06\x41\xd9\xb2\x1d\x01\xf7\x62\x2a\x40\x27\x59\x89\x18\xd6\x07\xfe\x5e\x0c\x52\x35\xc1\xbe\x6f\x60\x57\x64\x64\xa3\xc6\xa9\xbf\xf7\xf2\x57\x38\x20\x8e\xa8\x67\xe4\x74\xbf\x63\xfa\x9b\x14\x3a\x30\xa2\x5c\xb0\xd6\x0a\x97\x53\xb6\x3b\x8e\x4a\xdc\x55\xd9\x33\x96\x4a\x50\x36\x2a\x92\x87\x81\xc5\x61\x29\x30\xdc\xdb\xbe\x63\x32\x73\xcf\xb9\x79\x11\x54\x01\x48\x07\x41\xe2\x40\xa5\x84\xde\xbe\x93\xed\xe7\xa5\xae\xc4\x12\x86\x9c\x15\x94\xa9\x89\x88\x1f\xdc\x05\x4f\x2d\x22\x8a\x84\x96\x8c\xa2\x96\x16\xb0\xc7\x7d\xb0\xd5\xd1\xa4\x78\x03\x50\x3d\x6d\x5a\xcb\xc9\x50\x8e\x6c\x9f\x56\xa6\x3a\x76\x61\x27\x97\xa1\xad\x12\x65\x05\xc4\x31\xf5\x5f\x11\x9c\xc9\x72\x3c\xe4\x22\x24\x69\x4d\x28\x53\xef\xbe\x53\x0f\x58\xd1\xb0\x92\xc5\xa5\x88\x0d\xbb\x72\xcb\xb9\xb2\x79\x44\xc6\x20\x5c\x2f\xa0\xc0\x94\x4b\xa3\x76\x11\x68\x81\xb8\xaf\xcc\xc9\x12\x63\x45\x68\xd0\x86\x3e\x69\x31\x6f\x66\xe6\x55\x2e\x14\x35\x2c\x66\xe2\xf9\xb3\x2f\xce\x9f\xfd\x91\xcc\xa6\x2f\x1f\xce\x5e\x3c\xf9\x2a\x79\xf4\x4d\xf2\xf0\xfe\x8b\xa7\xd3\x6c\x3d\x9b\x0f\xff\xfd\x7d\x9c\xfc\xf6\xe5\xfc\xa7\xd3\xe4\xe4\x78\x3e\xfd\x2b\x39\xfe\x3a\x39\xf9\x33\xf9\xf5\x49\x61\x98\x3c\x78\x3c\x3f\xfd\x36\x5b\xc9\x47\x4a\x53\xd6\xbd\x0e\xa1\x69\xc9\xb6\xc9\x95\x25\xf6\xda\x4a\x64\x16\x01\xb5\x46\xa9\x11\x27\x11\x82\x94\xdb\x3b\xa6\x0a\x42\x7b\x34\x5e\xa5\x7e\x7d\xa6\xc4\x18\xd7\x4f\xa8\x06\xb2\x36\x39\xb0\x42\x62\xe5\x21\x8f\xdc\x7a\x26\xae\x11\xbb\x73\xc8\x23\x9b\xbf\xad\x12\x90\x25\x71\x05\xfc\x99\xcf\xba\x3e\xde\x44\xc2\xba\x73\xb9\xf0\x59\x44\x45\x73\xf3\xa6\xd0\xde\xe7\xdc\x97\x2b\x95\xf6\x93\xb8\x35\xb0\x48\xe8\xc1\xdf\xc2\x90\x84\x3c\x66\x4b\x65\xd4\x7a\x44\xe4\xf7\xaf\xd7\x9b\x61\xc7\x03\x06\x5b\xe6\x67\x44\x9b\x2c\x2b\x2e\xc0\xa5\x65\x2f\xa8\xa9\x1a\x1c\x6d\x9d\x86\xd0\xa4\x8f\xcf\xbf\x3f\x3b\x7f\xfe\x43\x72\x3a\x9b\x3f\x3e\x3b\xff\xe7\xe7\xf9\xfd\xb3\xcb\x5a\xb0\xad\xb4\x55\xbb\xc4\x1a\x26\xbf\xc7\x29\x73\x55\xf9\x5a\xd8\x38\x77\xc5\x95\xb2\xd6\xf5\xc8\x92\x0f\x5a\x73\x4b\xcb\xe4\x5a\xdf\xcd\x8c\xb0\xa4\xe6\x5c\x6b\xba\x58\xb4\x6d\xc2\x99\xe4\xe4\x38\x1b\xf3\x2f\xa7\xbf\x27\xb3\x69\x31\xfe\x2f\x63\xce\xc5\xf5\xb4\xd5\x5d\xdd\xd9\xeb\xf5\xfa\x8e\x63\xde\xd7\xfb\x83\xc1\xce\xa0\x7c\x81\xef\x0f\xdc\xed\x9d\x5d\xb7\xff\xd1\x96\xb3\x5b\xd9\xa9\xac\x7e\xd0\x1f\xf4\x6e\xdd\xd8\xde\xad\xb7\x29\x76\x2b\x3b\xce\xad\x9d\x0f\xeb\x6d\xd2\x9d\xea\xea\xed\xbd\x25\xc7\x6f\xef\xe5\x8b\xf9\x5a\xed\x77\xc7\x05\xf4\x4b\x52\xbb\x10\xfc\x0a\x72\x5c\x83\x12\xaf\xd4\x60\xcd\x7e\x2f\x80\xb4\x9e\x32\xc4\xf7\x05\xc8\xa5\x2a\x5d\xda\xd8\xab\x2c\xcf\xc8\x5d\xea\x89\xfa\xeb\xb4\x33\xe9\xfc\x1f\x00\x00\xff\xff\x63\x3d\x3d\x15\x40\x12\x00\x00")

func proto_micro_mall_order_proto_order_business_order_business_swagger_json() ([]byte, error) {
	return bindata_read(
		_proto_micro_mall_order_proto_order_business_order_business_swagger_json,
		"proto/micro_mall_order_proto/order_business/order_business.swagger.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"proto/micro_mall_order_proto/order_business/order_business.swagger.json": proto_micro_mall_order_proto_order_business_order_business_swagger_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"proto": &_bintree_t{nil, map[string]*_bintree_t{
		"micro_mall_order_proto": &_bintree_t{nil, map[string]*_bintree_t{
			"order_business": &_bintree_t{nil, map[string]*_bintree_t{
				"order_business.swagger.json": &_bintree_t{proto_micro_mall_order_proto_order_business_order_business_swagger_json, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}
